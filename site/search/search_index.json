{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Xengineering Regulator Documentation","text":"<p>Welcome to the comprehensive documentation for the Xengineering marine electrical regulator system.</p>"},{"location":"#what-youll-find-here","title":"What You'll Find Here","text":""},{"location":"#for-end-users","title":"For End Users","text":"<ul> <li>Getting Started - First-time setup and basic operation</li> <li>Installation Guide - Physical installation procedures  </li> <li>Quick Start - Get running in minutes</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#for-engineers-developers","title":"For Engineers &amp; Developers","text":"<ul> <li>Hardware Overview - Complete hardware architecture</li> <li>Software Overview - Code structure and development guide</li> </ul>"},{"location":"#system-overview","title":"System Overview","text":"<p>The Xengineering Regulator is a sophisticated marine electrical management system designed to monitor, control, and regulate various electrical systems aboard vessels.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Multi-Protocol Support: NMEA0183, NMEA2000, Victron VE.Direct</li> <li>Real-Time Monitoring: Digital/analog inputs, power flow monitoring  </li> <li>Web Interface: HTML/CSS/JavaScript client for remote control</li> <li>ESP32 Based: Reliable, WiFi-enabled microcontroller platform</li> <li>Modular Design: Expandable architecture for custom applications</li> </ul> <p>Choose your path above based on whether you're installing/using the system or developing/modifying it.</p>"},{"location":"basic-use/getting-started/","title":"Getting Started","text":"<p>Content to be updated later.</p>"},{"location":"basic-use/installation/","title":"Installation","text":"<p>Content to be updated later.</p>"},{"location":"basic-use/quick-start/","title":"Quick Start Guide","text":"<p>Content to be updated later.</p>"},{"location":"basic-use/troubleshooting/","title":"Troubleshooting","text":"<p>Content to be updated later.</p>"},{"location":"hardware/","title":"Hardware Overview","text":"<p>Content to be updated later.</p>"},{"location":"hardware/analog-inputs/","title":"Analog Inputs","text":"<p>Content to be updated later.</p>"},{"location":"hardware/connectors/","title":"Connectors","text":"<p>Content to be updated later.</p>"},{"location":"hardware/digital-inputs/","title":"Digital Inputs","text":"<p>The regulator has two different styles of digital input architectures, depending on the pin in question. They are all exposed in the Ethernet Connectors (see wiring diagrams).</p> <ol> <li>Optocoupler Style: Activated by voltage input (5-54V) </li> <li>Ground Style: Activated by shorting input to ground </li> </ol>"},{"location":"hardware/digital-inputs/#optocoupler-style-digital-inputs","title":"Optocoupler Style Digital Inputs","text":""},{"location":"hardware/digital-inputs/#design-requirements","title":"Design Requirements","text":"<ul> <li>Input voltage range: 5V to 54V on any of 6 digital input channels that use optical isolators</li> <li>Temperature range: -40\u00b0F to 180\u00b0F (-40\u00b0C to 82\u00b0C)</li> <li>Lifetime target: 10+ years at typical voltages (~12V), 3-6 years at maximum voltage (54V)</li> </ul>"},{"location":"hardware/digital-inputs/#how-an-optocoupler-works","title":"How an Optocoupler Works","text":"<p>The VO615A optocoupler provides electrical isolation between input circuit and ESP32 GPIO using light transmission:</p>"},{"location":"hardware/digital-inputs/#input-side-led","title":"Input Side (LED)","text":"<ol> <li>Input voltage applied across current limiting resistor and IR LED</li> <li>Forward current flows through LED, producing infrared light</li> <li>Light intensity proportional to forward current</li> </ol>"},{"location":"hardware/digital-inputs/#output-esp32-gpio-side-phototransistor","title":"Output (ESP32 GPIO) Side (Phototransistor)","text":"<ol> <li>IR light strikes phototransistor base region</li> <li>Light creates electron-hole pairs, acting as base current</li> <li>Transistor turns on, allowing collector current to flow</li> <li>Collector current = LED current \u00d7 CTR (Current Transfer Ratio)</li> <li>When sufficient collector current flows, voltage at collector drops low enough to register as logic LOW on ESP32</li> <li>Voltage otherwise pulled high (3.3V) by pull up resistor to 3.3V Supply</li> </ol>"},{"location":"hardware/digital-inputs/#isolation-benefits","title":"Isolation Benefits","text":"<ul> <li>Protection: High voltage transients on input side cannot damage ESP32</li> <li>Flexibility: Can accept input signals from 5V to 60V (lower life at higher voltages)</li> </ul>"},{"location":"hardware/digital-inputs/#component-selection","title":"Component Selection","text":""},{"location":"hardware/digital-inputs/#optocoupler-vo615a-9","title":"Optocoupler: VO615A-9","text":"<ul> <li>CTR: 200-400% minimum (vs 50-600% for base VO615A)</li> <li>Reason: Higher CTR enables reliable switching at low input voltages (5V), minimal extra cost</li> </ul>"},{"location":"hardware/digital-inputs/#current-limiting-resistor-68k-1w-2512-smd","title":"Current Limiting Resistor: 6.8k\u03a9, 1W, 2512 SMD","text":"<ul> <li>Calculation basis:</li> <li>At 5V: IF = (5V - 1.43V) / 6.8k\u03a9 = 0.53 mA</li> <li>At 54V: IF = (54V - 1.43V) / 6.8k\u03a9 = 7.7 mA</li> <li>Power rating: 404mW at 54V requires 1W resistor for safety margin</li> </ul>"},{"location":"hardware/digital-inputs/#pull-up-resistor-13k-0603-smd","title":"Pull-up Resistor: 13k\u03a9, 0603 SMD","text":"<ul> <li>Logic HIGH: When LED is OFF, phototransistor is OFF, collector pulled to 3.3V through 13k\u03a9</li> <li>Logic LOW: When LED is ON, phototransistor conducts, pulling collector toward ground</li> <li>Switching threshold: ESP32 typically switches at ~1.65V (50% of 3.3V)</li> </ul>"},{"location":"hardware/digital-inputs/#performance-analysis","title":"Performance Analysis","text":"Input Voltage LED Current vs Min (1mA) Lifetime Power (Watts) Power (mA@12V) 5V 0.53 mA 53% of min 20+ years 1.9 mW 0.16 mA 12V 1.57 mA 157% of min 20+ years 17 mW 1.4 mA 28V 3.91 mA 391% of min 10+ years 104 mW 8.7 mA 54V 7.7 mA 770% of min 3-6 years 404 mW 33.7 mA <p>Power consumption notes: - Power is consumed only when Input Signal is active (ie external switch is ON) - No power consumption when Input Signal = 0V (ie external switch OFF) - LED power = Forward current \u00d7 1.43V (LED forward voltage) - Resistor power = Forward current\u00b2 \u00d7 6.8k\u03a9</p>"},{"location":"hardware/digital-inputs/#protection-diode-1n4148wsx","title":"Protection Diode: 1N4148WSX","text":""},{"location":"hardware/digital-inputs/#function-reverse-voltage-protection","title":"Function: Reverse Voltage Protection","text":"<p>The 1N4148WSX diode provides critical protection for the optocoupler LED:</p> <ul> <li>Normal operation: Diode is reverse biased across LED, no current flows</li> <li>Reverse voltage protection: If Input Signal goes negative, diode conducts and clamps reverse voltage to ~0.7V</li> <li>Prevents LED damage: VO615A LED can only handle 6V reverse voltage maximum</li> </ul>"},{"location":"hardware/digital-inputs/#why-critical","title":"Why Critical","text":"<ul> <li>Load dump transients: Long wires / disconnection can create voltage spikes</li> <li>Electrical noise: Marine electrical systems are electrically noisy environments</li> </ul>"},{"location":"hardware/digital-inputs/#specifications-failure-limits","title":"Specifications &amp; Failure Limits","text":"<ul> <li>Forward voltage: 0.7V typical, 1.25V maximum at 10mA</li> <li>Reverse voltage rating: 75V maximum</li> <li>Forward current rating: 300mA continuous, 2A peak (1\u00b5s pulse)</li> <li>Power dissipation: 350mW at 25\u00b0C</li> </ul>"},{"location":"hardware/digital-inputs/#failure-analysis","title":"Failure Analysis","text":"<p>The diode will fail if: - Forward current &gt; 300mA continuous: At maximum negative transient - Reverse voltage &gt; 75V: If positive Input Signal exceeds 75V (well above our 54-60V max) - Power dissipation &gt; 350mW: P = If \u00d7 0.7V, so fails at If &gt; 500mA</p> <p>The 1N4148WSX provides robust protection for all expected marine transient conditions.</p>"},{"location":"hardware/digital-inputs/#system-power-consumption","title":"System Power Consumption","text":"Condition LED Side ESP32 Side Total Power Total (mA@12V) Input OFF 0 mW 0.83 mW 0.83 mW 0.07 mA Input ON (12V) 17 mW ~0 mW 17 mW 1.4 mA Input ON (54V) 404 mW ~0 mW 404 mW 33.7 mA"},{"location":"hardware/digital-inputs/#led-current-guidelines","title":"LED Current Guidelines","text":"<ul> <li>1-3mA: Conservative operation (20+ year lifetime)</li> <li>3-8mA: Moderate operation (5-10 year lifetime)  </li> <li>8-15mA: Aggressive operation (1-5 year lifetime)</li> </ul>"},{"location":"hardware/digital-inputs/#design-validation","title":"Design Validation","text":"<ul> <li>5V switching: 0.53mA with 200% CTR provides reliable switching despite being below 1mA datasheet specification</li> <li>54V survival: 7.7mA current provides marginal 3-6 year life if 100% duty cycle</li> <li>Temperature performance: VO615A-9's high CTR provides margin for temperature derating across -40\u00b0F to 180\u00b0F range</li> </ul>"},{"location":"hardware/digital-inputs/#schematic-implementation","title":"Schematic Implementation","text":"<pre><code>Input Signal \u2500\u2500[6.8k\u03a9, 1W]\u2500\u2500[LED|\u2500\u2500\u2500\u2500 GND\n                                 |\n                                 |  (Optical coupling)\n                                 |\nESP32_GPIO \u2500\u2500[13k\u03a9]\u2500\u25003.3V        |\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[Collector|Emitter]\u2500\u2500\u2500\u2500 GND\n</code></pre>"},{"location":"hardware/digital-inputs/#bill-of-materials-optocoupler-style","title":"Bill of Materials (Optocoupler Style)","text":"<ul> <li>U1: VO615A-9 optocoupler</li> <li>R1: 6.8k\u03a9 \u00b11%, 1W, 2512 SMD resistor  </li> <li>R2: 13k\u03a9 \u00b15%, 1/8W, 0603 SMD pull-up resistor</li> <li>D1: 1N4148WSX fast switching diode, SOD-323 SMD</li> </ul>"},{"location":"hardware/digital-inputs/#ground-style-digital-inputs","title":"Ground Style Digital Inputs","text":""},{"location":"hardware/digital-inputs/#schematic","title":"Schematic","text":"<pre><code>3.3V \u2500\u2500[10k\u03a9]\u2500\u2500\u252c\u2500\u2500[C51:1\u00b5F]\u2500\u2500GND\n               \u2502\n               \u251c\u2500\u2500[D32:ESD]\u2500\u2500GND\n               \u2502\n               \u251c\u2500\u2500 Output Signal to ESP32 GPIO\n               \u2502\n               \u2514\u2500\u2500[R5:500\u03a9]\u2500\u2500 Input Signal\n</code></pre>"},{"location":"hardware/digital-inputs/#design-requirements_1","title":"Design Requirements","text":"<ul> <li>Input method: Short to ground activation</li> <li>Temperature range: -40\u00b0F to 180\u00b0F (-40\u00b0C to 82\u00b0C)</li> <li>Debouncing: Hardware RC filter for switch bounce elimination</li> <li>Protection: ESD protection and current limiting for exposed inputs</li> </ul>"},{"location":"hardware/digital-inputs/#how-ground-style-inputs-work","title":"How Ground Style Inputs Work","text":"<p>This design uses a voltage divider with current limiting and RC debounce filtering:</p>"},{"location":"hardware/digital-inputs/#normal-operation-switch-open","title":"Normal Operation (Switch Open)","text":"<ol> <li>Input Signal is not connected (floating or open)</li> <li>No current flows through R5 (500\u03a9)</li> <li>Pull-up resistor R57 (10k\u03a9) pulls Output Signal to 3.3V</li> <li>ESP32 GPIO reads logic HIGH (3.3V)</li> </ol>"},{"location":"hardware/digital-inputs/#activated-operation-switch-closed-to-ground","title":"Activated Operation (Switch Closed to Ground)","text":"<ol> <li>Input Signal is shorted to ground by external switch/contact</li> <li>Current flows from 3.3V through R57 (13k\u03a9) to ground via the switch</li> <li>Junction voltage: V_out = 0V (direct connection to ground)</li> <li>ESP32 GPIO reads logic LOW (0V &lt;&lt; 0.8V threshold)</li> </ol>"},{"location":"hardware/digital-inputs/#component-analysis","title":"Component Analysis","text":""},{"location":"hardware/digital-inputs/#pull-up-resistor-r57-13k","title":"Pull-up Resistor: R57 (13k\u03a9)","text":"<ul> <li>Function: Pulls Output Signal HIGH when Input Signal is not grounded</li> <li>Power when input open: P = 3.3V\u00b2/13k\u03a9 = 0.84 mW</li> <li>Power when input grounded: P = 3.3V\u00b2/13k\u03a9 = 0.84 mW (continuous)</li> </ul>"},{"location":"hardware/digital-inputs/#debounce-capacitor-c51-1f","title":"Debounce Capacitor: C51 (1\u00b5F)","text":"<ul> <li>Function: Filters switch bounce and electrical noise</li> <li>Time constant: \u03c4 = R57 \u00d7 C51 = 10k\u03a9 \u00d7 1\u00b5F = 10ms</li> <li>Settling time: ~3\u03c4 = 30ms for clean switching</li> <li>Noise immunity: Filters high-frequency electrical noise</li> </ul>"},{"location":"hardware/digital-inputs/#esd-protection-diode-d32-esd5z250t1g","title":"ESD Protection Diode: D32 (ESD5Z25.0T1G)","text":"<ul> <li>Function: Clamps overvoltage transients to protect ESP32 GPIO</li> <li>Clamp voltage: 25V typical</li> <li>Application: Protects against static discharge and voltage spikes on input wiring</li> </ul>"},{"location":"hardware/digital-inputs/#performance-analysis_1","title":"Performance Analysis","text":""},{"location":"hardware/digital-inputs/#switching-characteristics","title":"Switching Characteristics","text":"<ul> <li>Rise time: Limited by RC time constant = 10ms</li> <li>Fall time: Much faster, limited by R5 and ESP32 input capacitance</li> <li>Debounce time: ~30ms eliminates typical switch bounce</li> </ul>"},{"location":"hardware/digital-inputs/#power-consumption","title":"Power Consumption","text":"Condition Current Power Power (mA@12V) Input Open 0.25 mA 0.84 mW 0.07 mA Input Grounded 0.25 mA 0.84 mW 0.07 mA <p>Power consumption notes: - Continuous power draw regardless of input state (due to pull-up resistor) - Very low power consumption suitable for battery applications - Power draw is essentially constant whether switch is open or closed</p>"},{"location":"hardware/digital-inputs/#voltage-levels","title":"Voltage Levels","text":"<ul> <li>Logic HIGH: 3.3V (input open/floating)</li> <li>Logic LOW: 0.157V (input grounded via voltage divider)</li> <li>Switching threshold: ESP32 switches at ~0.8V, providing excellent noise margin</li> <li>Noise margin HIGH: 3.3V - 0.8V = 2.5V</li> <li>Noise margin LOW: 0.8V - 0.157V = 0.64V</li> </ul>"},{"location":"hardware/digital-inputs/#esp32-s3-internal-esd-protection-and-real-esd-event-analysis","title":"ESP32-S3 Internal ESD Protection and Real ESD Event Analysis","text":""},{"location":"hardware/digital-inputs/#esp32-s3-internal-protection-specifications","title":"ESP32-S3 Internal Protection Specifications","text":"<p>From the ESP32-S3 datasheet: - Human Body Model (HBM) ESD tolerance: \u00b12000V - Charged Device Model (CDM) ESD tolerance: \u00b11000V - Absolute maximum input voltage: 3.6V (VDD + 0.3V) - Internal protection: Snapback devices on all GPIO pins</p>"},{"location":"hardware/digital-inputs/#what-actually-happens-during-an-esd-event","title":"What Actually Happens During an ESD Event","text":"<p>Scenario: 8kV HBM discharge to Input Signal wire</p> <ol> <li>Initial ESD pulse: 8000V spike with ~1.5k\u03a9 source resistance (HBM model)</li> <li>External TVS diode (D32) activates: </li> <li>Clamps voltage to ~25V within nanoseconds</li> <li>Current through D32: I = (8000V - 25V) / 1500\u03a9 = ~5.3A initially</li> <li>D32 can handle 2A peak current for 1\u00b5s pulses - adequate for HBM discharge</li> <li>ESP32 internal protection response:</li> <li>25V still exceeds the 3.6V absolute maximum</li> <li>Internal snapback devices activate at ~7-10V</li> <li>Snapback devices clamp GPIO voltage to ~5-7V</li> <li>Current flows through internal protection to chip ground</li> <li>Current path: ESD energy \u2192 D32 \u2192 ESP32 internal snapback \u2192 chip ground</li> <li>Result: GPIO survives due to dual protection layers</li> </ol>"},{"location":"hardware/digital-inputs/#why-25v-tvs-clamp-voltage-works","title":"Why 25V TVS Clamp Voltage Works","text":"<p>The key insight: The ESP32's internal ESD protection is designed to handle exactly this scenario. The internal snapback devices are specifically designed for ESD events where voltage exceeds normal operating range.</p> <p>Espressif's official position (from ESP32 forum): \"The ESP32 has internal snapback devices in order to handle ESD on all pins. The external ESD protector is simply a belts-and-braces approach to make sure someone doesn't accidentally zap through the internal protections.\"</p>"},{"location":"hardware/digital-inputs/#design-validation-for-esd-protection","title":"Design Validation for ESD Protection","text":"<p>IEC 61000-4-2 Contact Discharge Test (typical requirement): - Test voltage: \u00b18kV - With D32 + ESP32 internal protection: PASS - Reasoning: Dual protection layers handle energy dissipation effectively</p> <p>Real-world ESD sources: - Human walking on carpet: 2-15kV - Handling in dry environment: 5-25kV - Protection margin: Adequate for typical applications</p> <p>The design provides robust ESD protection through the combination of external TVS diode current limiting and ESP32's proven internal snapback protection, without requiring additional current limiting resistors that would compromise digital functionality.</p>"},{"location":"hardware/digital-inputs/#design-validation_1","title":"Design Validation","text":"<ul> <li>Noise immunity: 1\u00b5F capacitor filters electrical noise effectively</li> <li>ESD protection: 25V clamp diode protects against static discharge</li> <li>Current limiting: No current limiting resistor - relies on ESP32 internal protection</li> <li>Low power: &lt;1mW continuous power consumption</li> <li>Reliable switching: Large noise margins ensure reliable operation</li> </ul>"},{"location":"hardware/digital-inputs/#bill-of-materials-ground-style","title":"Bill of Materials (Ground Style)","text":"<ul> <li>R57: 13k\u03a9 \u00b15%, 1/8W, 0603 SMD pull-up resistor  </li> <li>C51: 1\u00b5F \u00b110%, X7R, 0603 SMD capacitor</li> <li>D32: ESD5Z25.0T1G TVS diode, SOD-523 SMD</li> </ul>"},{"location":"hardware/digital-inputs/#comparison-optocoupler-vs-ground-style","title":"Comparison: Optocoupler vs Ground Style","text":"Feature Optocoupler Style Ground Style Input Range 5V to 54V Ground short only Power (Active) 1.4-33.7 mA@12V 0.085 mA@12V Power (Inactive) 0.07 mA@12V 0.091 mA@12V Component Count 4 components 4 components Cost Higher (optocoupler) Lower (passive components) Complexity Medium Low Noise Immunity Excellent Good Applications High voltage, isolation required Simple switches, low voltage"},{"location":"hardware/digital-outputs/","title":"Digital Outputs","text":"<p>Content to be updated later.</p>"},{"location":"hardware/esp32-brain/","title":"ESP32 Brain","text":"<p>Content to be updated later.</p>"},{"location":"hardware/field%20output%20/","title":"Alternator Field Drive","text":""},{"location":"hardware/field%20output%20/#purpose","title":"Purpose","text":"<p>This circuit provides a high-side PWM drive to the gate of the N-channel MOSFET controlling the alternator field coil. The goal is to achieve efficient, reliable operation up to 100kHz PWM while minimizing quiescent current when the circuit is inactive.</p>"},{"location":"hardware/field%20output%20/#source-signal","title":"Source Signal","text":"<ul> <li>Origin: ESP32 PWM-capable GPIO</li> <li>Voltage: 3.3V logic level</li> </ul>"},{"location":"hardware/field%20output%20/#main-components","title":"Main Components","text":"Component Function LM5109A High-speed high-side gate driver (10-12V VDD) MT3608 Boost converter from 5V to 12V for gate driver BSC072N08NS5 N-channel MOSFET to switch field coil 74LVC1G04 Inverter to enable/disable the 5V rail via logic BSS84 P-MOSFET to gate 74LVC1G04 enable logic Bootstrap Diode (BAS16LT1G) Charges bootstrap cap during low-side on Bootstrap Cap (100nF\u20131uF, 100V) Supplies transient gate drive voltage Gate Resistor (~10\u03a9) Limits gate inrush and dampens ringing"},{"location":"hardware/field%20output%20/#operating-voltages","title":"Operating Voltages","text":"<ul> <li>Logic Source: 3.3V from ESP32</li> <li>Driver Supply (VDD): 10\u201312V from MT3608</li> <li>PWM Frequency Target: Up to 100kHz</li> </ul>"},{"location":"hardware/field%20output%20/#power-management","title":"Power Management","text":"<ul> <li>5V supply is software-controlled via Field Enable + ON/OFF + Alert! logic</li> <li>If 5V is off, MT3608 also ceases operation (since input is cut), minimizing idle current</li> <li>No TVS or gate clamp added (assumes clean layout and short traces)</li> </ul>"},{"location":"hardware/field%20output%20/#performance-goals","title":"Performance Goals","text":"<ul> <li>Reliable switching with &gt;10V Vgs</li> <li>Minimal idle current draw when disabled</li> <li>Efficient field coil control with minimal MOSFET dissipation</li> </ul>"},{"location":"hardware/field%20output%20/#notes","title":"Notes","text":"<ul> <li>Bootstrap capacitor sizing must support fast switching without voltage sag</li> </ul>"},{"location":"hardware/field%20output%20/#mosfet-thermal-and-current-limit-analysis","title":"MOSFET Thermal and Current Limit Analysis","text":""},{"location":"hardware/field%20output%20/#key-parameters","title":"Key Parameters","text":"<ul> <li>Gate drive voltage (V<sub>GS</sub>): 12\u202fV</li> <li>Estimated R<sub>DS(on)</sub> at 12\u202fV: \u2248\u202f5.5\u202fm\u03a9 (conservative extrapolation from datasheet graph)</li> <li>PCB configuration: 4-layer board with good copper and via stitching</li> <li>No external heatsink</li> <li>Max junction temperature (T<sub>J,max</sub>): 100\u202f\u00b0C</li> <li>Ambient temperature (T<sub>A</sub>): 25\u202f\u00b0C</li> <li>Estimated thermal resistance (R<sub>\u03b8JA</sub>): ~25\u202f\u00b0C/W (based on good PCB design for SON-8 package)</li> </ul>"},{"location":"hardware/field%20output%20/#max-power-dissipation","title":"Max Power Dissipation","text":"<p>[ \\Delta T = T_{J,max} - T_A = 100 - 25 = 75^\\circ C ]</p> <p>[ P_{max} = \\frac{75}{25} = 3\\,W ]</p>"},{"location":"hardware/field%20output%20/#max-continuous-current","title":"Max Continuous Current","text":"<p>[ P = I^2 \\cdot R_{DS(on)} \\Rightarrow I_{max} = \\sqrt{\\frac{3}{0.0055}} \\approx 23.3\\,A ]</p>"},{"location":"hardware/field%20output%20/#practical-limits","title":"Practical Limits","text":"Limit Type Estimate Power-limited current ~23\u202fA Safe continuous current 15\u201320\u202fA (margin) Likely failure point &gt;\u202f23\u202fA (thermal) <p>Note: Above 20\u202fA, trace heating, solder joint fatigue, and junction rise make failure more likely without forced cooling or heatsinking.  Ambient temperature assumption of 25C is not worst case scenario.</p>"},{"location":"hardware/field%20output%20/#revision-info","title":"Revision Info","text":"<ul> <li>Original driver (MAX15054) replaced due to low Vgs drive at 5V rail</li> <li>New system uses external 12V boost to properly saturate the MOSFET gate</li> </ul>"},{"location":"hardware/nmea0183/","title":"NMEA0183","text":"<p>Content to be updated later.</p>"},{"location":"hardware/nmea2k/","title":"NMEA2K","text":"<p>Content to be updated later.</p>"},{"location":"hardware/power-flow/","title":"Main Power Flow","text":"<p>Content to be updated later.</p>"},{"location":"hardware/victron-vedirect/","title":"Victron VE.Direct","text":"<p>Content to be updated later.</p>"},{"location":"localstuff%20for%20Xengineering%20ref/esp32_partition_guide/","title":"ESP32-S3 Custom 5MB OTA Partition Setup Guide for Arduino IDE 2.x","text":""},{"location":"localstuff%20for%20Xengineering%20ref/esp32_partition_guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Arduino IDE 2.x installed</li> <li>ESP32-S3 board with 16MB flash</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/esp32_partition_guide/#step-1-install-esp32-board-package","title":"Step 1: Install ESP32 Board Package","text":"<ol> <li>Open Arduino IDE 2.x</li> <li>Go to File \u2192 Preferences</li> <li>In \"Additional board manager URLs\" add:    <pre><code>https://espressif.github.io/arduino-esp32/package_esp32_index.json\n</code></pre></li> <li>Go to Tools \u2192 Board \u2192 Boards Manager</li> <li>Search for \"ESP32\" and install \"esp32 by Espressif Systems\"</li> <li>Select your ESP32-S3 board: Tools \u2192 Board \u2192 ESP32 Arduino \u2192 Your ESP32-S3 variant</li> </ol>"},{"location":"localstuff%20for%20Xengineering%20ref/esp32_partition_guide/#step-2-clear-arduino-cache","title":"Step 2: Clear Arduino Cache","text":"<p>Important: Clear Arduino cache to avoid conflicts: <pre><code>rm -rf ~/Library/Caches/arduino\n</code></pre></p>"},{"location":"localstuff%20for%20Xengineering%20ref/esp32_partition_guide/#step-3-create-custom-partition-table","title":"Step 3: Create Custom Partition Table","text":"<ol> <li> <p>Open Terminal and navigate to your sketch folder: <pre><code>cd /Users/joeceo/Documents/Arduino/Xregulator\n</code></pre></p> </li> <li> <p>Create partitions.csv file using Terminal cat command: <pre><code>cat &gt; partitions.csv &lt;&lt; 'EOF'\n# Name, Type, SubType, Offset, Size, Flags\nnvs, data, nvs, 0x9000, 0x5000,\notadata, data, ota, 0xe000, 0x2000,\napp0, app, ota_0, 0x10000, 0x500000,\napp1, app, ota_1, 0x510000, 0x500000,\nspiffs, data, spiffs, 0xa10000, 0x5D0000,\ncoredump, data, coredump, 0xFF0000, 0x40000,\nEOF\n</code></pre></p> </li> <li> <p>Verify the file was created: <pre><code>cat /Users/joeceo/Documents/Arduino/Xregulator/partitions.csv\n</code></pre></p> </li> </ol>"},{"location":"localstuff%20for%20Xengineering%20ref/esp32_partition_guide/#step-4-configure-arduino-ide-for-custom-partitions","title":"Step 4: Configure Arduino IDE for Custom Partitions","text":"<ol> <li>Tools \u2192 Programmer \u2192 esptool (select esptool as programmer)</li> <li>Important: Any partition scheme selected in Tools \u2192 Partition Scheme will be ignored when partitions.csv exists in sketch folder</li> </ol>"},{"location":"localstuff%20for%20Xengineering%20ref/esp32_partition_guide/#step-5-clear-cache-and-upload","title":"Step 5: Clear Cache and Upload","text":"<ol> <li> <p>Clear Arduino cache again before upload: <pre><code>rm -rf ~/Library/Caches/arduino\n</code></pre></p> </li> <li> <p>Upload your sketch using the regular Upload button</p> </li> </ol>"},{"location":"localstuff%20for%20Xengineering%20ref/esp32_partition_guide/#step-6-verify-success","title":"Step 6: Verify Success","text":"<p>Upload this verification sketch: <pre><code>#include \"esp_partition.h\"\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(2000);\n  Serial.println(\"=== Partition Table ===\");\n\n  esp_partition_iterator_t it = esp_partition_find(ESP_PARTITION_TYPE_APP, ESP_PARTITION_SUBTYPE_ANY, NULL);\n  while (it != NULL) {\n    const esp_partition_t* part = esp_partition_get(it);\n    Serial.printf(\"APP: %s at 0x%x, size: %d MB\\n\", \n                  part-&gt;label, part-&gt;address, part-&gt;size/1024/1024);\n    it = esp_partition_next(it);\n  }\n  esp_partition_iterator_release(it);\n}\n\nvoid loop() {}\n</code></pre></p> <p>Expected output: <pre><code>APP: app0 at 0x10000, size: 5 MB\nAPP: app1 at 0x510000, size: 5 MB\n</code></pre></p>"},{"location":"localstuff%20for%20Xengineering%20ref/esp32_partition_guide/#key-points","title":"Key Points","text":"<ul> <li>\u2705 partitions.csv in sketch folder automatically overrides all IDE partition settings</li> <li>\u2705 Clear Arduino cache frequently to avoid stale cached partition tables</li> <li>\u2705 Always use Terminal cat command to create partitions.csv</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/esp32_partition_guide/#important-note-about-compilation-messages","title":"Important Note About Compilation Messages","text":"<p>Why compilation messages caused confusion: Arduino IDE's compilation output shows flash erase ranges that may be smaller than your full partition size (e.g., erasing 1.38MB instead of 5MB). This is normal optimization behavior - Arduino only erases the flash area needed for your current application, not the entire partition. Your 5MB partitions are still correctly configured and available for OTA updates.</p>"},{"location":"localstuff%20for%20Xengineering%20ref/esp32_partition_guide/#troubleshooting","title":"Troubleshooting","text":"<p>If you get boot errors:</p> <ol> <li> <p>Clear cache: <pre><code>rm -rf ~/Library/Caches/arduino\n</code></pre></p> </li> <li> <p>Complete erase (if needed): <pre><code>find ~/Library/Arduino15/packages/esp32/tools -name \"esptool.py\" -exec python3 {} --chip esp32s3 --port /dev/cu.usbserial-* erase_flash \\;\n</code></pre></p> </li> <li> <p>Then upload normally using Upload button</p> </li> </ol>"},{"location":"localstuff%20for%20Xengineering%20ref/esp32_partition_guide/#cache-clearing-schedule","title":"Cache Clearing Schedule","text":"<p>Clear Arduino cache: - \u2705 Before creating partitions.csv - \u2705 Before uploading - \u2705 Whenever you get unexpected partition behavior - \u2705 After any ESP32 platform updates</p> <p>Command to remember: <pre><code>rm -rf ~/Library/Caches/arduino\n</code></pre></p>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/","title":"Complete MkDocs GitHub Pages Setup Guide","text":""},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#ai-assistant-instructions","title":"AI Assistant Instructions","text":"<p>If you're an AI helping with this project, here are the key details:</p> <p>User Environment: - Platform: macOS - Project location: <code>~/Projects/xengineering_docs/</code> (note: folder name is <code>xengineering_docs</code>, repo name is <code>regulatordocumentation</code>) - Repository: <code>markliquid1/regulatordocumentation</code> - Live site: https://docs.xengineering.net - GitHub Pages URL: https://markliquid1.github.io/regulatordocumentation</p> <p>User Preferences: - Terminal commands: Always provide copy-paste ready commands with NO comments - Always assume new terminal: Start with <code>ls</code> and <code>cd ~/Projects/xengineering_docs</code>  - Multiple commands: Group them together so user can paste all at once - No placeholders: Use actual repo names, not \"yourrepo\" or \"username\" - Direct answers: No explanatory fluff, just working solutions</p> <p>Current Setup: - Uses GitHub Actions deployment (NOT <code>mkdocs gh-deploy</code>) - MkDocs Material theme with custom CSS - Teal accent color (<code>#00a19a</code>) - Custom domain configured - Right sidebar disabled</p> <p>File Structure: <pre><code>xengineering_docs/\n\u251c\u2500\u2500 .github/workflows/deploy.yml\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 stylesheets/extra.css\n\u2502   \u251c\u2500\u2500 basic-use/\n\u2502   \u251c\u2500\u2500 hardware/ \n\u2502   \u251c\u2500\u2500 software/\n\u2502   \u251c\u2500\u2500 CNAME\n\u2502   \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 mkdocs.yml\n\u2514\u2500\u2500 site/ (ignore - auto-generated)\n</code></pre></p>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#overview","title":"Overview","text":"<p>This guide shows how to set up a professional MkDocs documentation site with GitHub Actions deployment, avoiding the problematic <code>mkdocs gh-deploy</code> command that causes source/deployment sync issues.</p>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#initial-setup","title":"Initial Setup","text":""},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#1-create-github-repository","title":"1. Create GitHub Repository","text":"<ol> <li>Go to GitHub and create a new repository</li> <li>Clone it locally:    <pre><code>git clone https://github.com/yourusername/yourrepo.git\ncd yourrepo\n</code></pre></li> </ol>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#2-install-mkdocs-locally","title":"2. Install MkDocs Locally","text":"<pre><code>pip install mkdocs-material\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#3-initialize-mkdocs-project","title":"3. Initialize MkDocs Project","text":"<pre><code>mkdocs new .\n</code></pre> <p>This creates: - <code>mkdocs.yml</code> (configuration file) - <code>docs/</code> folder with <code>index.md</code></p>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#4-configure-mkdocs","title":"4. Configure MkDocs","text":"<p>Replace the contents of <code>mkdocs.yml</code>:</p> <pre><code>site_name: Xengineering Documentation\nsite_url: https://docs.xengineering.net\nsite_description: Technical documentation for Xengineering marine electrical regulator system\nsite_author: Xengineering\n\nrepo_name: markliquid1/regulatordocumentation\nrepo_url: https://github.com/markliquid1/regulatordocumentation\n\ntheme:\n  name: material\n  features:\n    - navigation.sections\n    - navigation.expand\n    - search.highlight\n\nplugins:\n  - search\n\nextra_css:\n  - stylesheets/extra.css\n\nmarkdown_extensions:\n  - admonition\n  - pymdownx.highlight\n  - pymdownx.superfences\n  - toc:\n      permalink: true\n\nnav:\n  - Home: index.md\n  - Getting Started: getting-started.md\n  - Advanced: advanced.md\n\ncopyright: Copyright &amp;copy; 2025 Your Name\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#5-create-custom-styling-optional","title":"5. Create Custom Styling (Optional)","text":"<pre><code>mkdir -p docs/stylesheets\n</code></pre> <p>Create <code>docs/stylesheets/extra.css</code>:</p> <pre><code>:root {\n  --md-primary-fg-color: #333333;\n  --md-accent-fg-color: #00a19a;\n  --md-default-bg-color: #f5f5f5;\n}\n\n.md-typeset a {\n  color: #00a19a;\n}\n\n.md-nav__link--active {\n  color: #00a19a;\n}\n\n.md-nav__link:hover {\n  color: #00a19a;\n}\n\n.md-sidebar--secondary {\n  display: none !important;\n}\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#6-test-locally","title":"6. Test Locally","text":"<pre><code>mkdocs serve\n</code></pre> <p>Visit <code>http://127.0.0.1:8000</code> to preview your site.</p>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#github-actions-deployment-setup","title":"GitHub Actions Deployment Setup","text":""},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#1-create-workflow-file","title":"1. Create Workflow File","text":"<pre><code>mkdir -p .github/workflows\n</code></pre> <p>Create <code>.github/workflows/deploy.yml</code>:</p> <pre><code>name: Deploy MkDocs to GitHub Pages\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\nconcurrency:\n  group: pages\n  cancel-in-progress: false\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Setup Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: '3.x'\n\n      - name: Cache pip dependencies\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n\n      - name: Install MkDocs and dependencies\n        run: |\n          pip install mkdocs-material\n\n      - name: Build documentation\n        run: mkdocs build --clean\n\n      - name: Upload Pages artifact\n        uses: actions/upload-pages-artifact@v3\n        with:\n          path: ./site\n\n  deploy:\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#2-initial-commit-and-push","title":"2. Initial Commit and Push","text":"<pre><code>git add .\ngit commit -m \"Initial MkDocs setup with GitHub Actions deployment\"\ngit push origin main\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#3-enable-github-pages","title":"3. Enable GitHub Pages","text":"<p>CRITICAL STEP: Go to your GitHub repository: 1. Settings \u2192 Pages 2. Under \"Source\" select \"GitHub Actions\" (NOT \"Deploy from a branch\") 3. Save</p>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#4-wait-for-deployment","title":"4. Wait for Deployment","text":"<ul> <li>Go to Actions tab in your GitHub repo</li> <li>Watch the workflow run (takes 2-3 minutes)</li> <li>Site will be live at <code>https://markliquid1.github.io/regulatordocumentation</code></li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#setting-up-custom-domain-optional","title":"Setting Up Custom Domain (Optional)","text":""},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#1-create-cname-file","title":"1. Create CNAME File","text":"<pre><code>echo \"docs.xengineering.net\" &gt; docs/CNAME\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#2-configure-dns","title":"2. Configure DNS","text":"<p>Add a CNAME record in your DNS settings: - Name: <code>docs</code> (or whatever subdomain you want) - Value: <code>markliquid1.github.io</code></p>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#3-update-mkdocsyml","title":"3. Update mkdocs.yml","text":"<p>Change the <code>site_url</code> in <code>mkdocs.yml</code>: <pre><code>site_url: https://docs.xengineering.net\n</code></pre></p>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#4-commit-and-deploy","title":"4. Commit and Deploy","text":"<pre><code>git add docs/CNAME mkdocs.yml\ngit commit -m \"Add custom domain\"\ngit push origin main\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#editing-your-site","title":"Editing Your Site","text":""},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#daily-workflow","title":"Daily Workflow","text":"<pre><code># Navigate to project\ncd ~/Projects/xengineering_docs\n\n# Edit files (use any editor)\n# Make your changes...\n\n# Deploy changes\ncd ~/Projects/xengineering_docs\ngit add .\ngit commit -m \"Update documentation\"\ngit push origin main\n</code></pre> <p>That's it! GitHub Actions automatically builds and deploys your changes in 2-3 minutes.</p>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#adding-new-pages","title":"Adding New Pages","text":""},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#1-create-the-markdown-file","title":"1. Create the Markdown File","text":"<pre><code># Create new page\necho \"# New Page Title\n\nContent goes here...\" &gt; docs/new-page.md\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#2-add-to-navigation","title":"2. Add to Navigation","text":"<p>Edit <code>mkdocs.yml</code> and add to the <code>nav</code> section:</p> <pre><code>nav:\n  - Home: index.md\n  - Getting Started: getting-started.md\n  - New Page: new-page.md  # &lt;-- Add this line\n  - Advanced: advanced.md\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#3-create-subsections","title":"3. Create Subsections","text":"<p>For nested navigation:</p> <pre><code>nav:\n  - Home: index.md\n  - User Guide:\n    - Getting Started: user-guide/getting-started.md\n    - Installation: user-guide/installation.md\n    - Troubleshooting: user-guide/troubleshooting.md\n  - Developer Guide:\n    - API Reference: dev-guide/api.md\n    - Contributing: dev-guide/contributing.md\n</code></pre> <p>Create the folder structure: <pre><code>mkdir -p docs/user-guide docs/dev-guide\necho \"# Getting Started\" &gt; docs/user-guide/getting-started.md\necho \"# API Reference\" &gt; docs/dev-guide/api.md\n</code></pre></p> <p>For copy-paste images: Unfortunately, there's no elegant solution. MkDocs/GitHub requires images to be files in the repository. Your options:</p> <ol> <li>Drag and drop (if using VS Code/editor that supports it)</li> <li>Screenshot to file, then drag (macOS: Cmd+Shift+4, save to Desktop, drag to <code>docs/images/</code>)</li> <li>Use a different platform like Notion, GitBook, or Confluence that support direct paste</li> </ol> <p>The filesystem requirement is fundamental to how static site generators work - they need actual image files to include in the build.</p> <pre><code>mkdir -p docs/images\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#2-add-image-files","title":"2. Add Image Files","text":"<p>Copy your images to <code>docs/images/</code>: <pre><code>cp ~/Desktop/screenshot.png docs/images/\ncp ~/Desktop/diagram.jpg docs/images/\n</code></pre></p>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#3-reference-images-in-markdown","title":"3. Reference Images in Markdown","text":"<p>In any <code>.md</code> file:</p> <pre><code># My Page\n\nHere's a screenshot:\n\n![Screenshot description](images/screenshot.png)\n\nYou can also add captions:\n\n![System diagram](images/diagram.jpg)\n*Figure 1: System architecture overview*\n\nFor clickable images:\n[![Clickable image](images/screenshot.png)](images/screenshot.png)\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#4-image-best-practices","title":"4. Image Best Practices","text":"<ul> <li>Supported formats: PNG, JPG, GIF, SVG, WebP</li> <li>File naming: Use lowercase, dashes instead of spaces (<code>system-diagram.png</code>)</li> <li>Size: Optimize images for web (usually under 1MB)</li> <li>Alt text: Always include descriptive alt text for accessibility</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#advanced-image-usage","title":"Advanced Image Usage","text":""},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#sizing-images-with-html","title":"Sizing Images with HTML","text":"<pre><code>&lt;img src=\"images/logo.png\" alt=\"Company logo\" width=\"200\"&gt;\n\n&lt;img src=\"images/diagram.png\" alt=\"Architecture\" style=\"max-width: 100%; height: auto;\"&gt;\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#image-galleries","title":"Image Galleries","text":"<pre><code>&lt;div style=\"display: flex; gap: 10px;\"&gt;\n  &lt;img src=\"images/photo1.jpg\" alt=\"Photo 1\" style=\"width: 30%;\"&gt;\n  &lt;img src=\"images/photo2.jpg\" alt=\"Photo 2\" style=\"width: 30%;\"&gt;\n  &lt;img src=\"images/photo3.jpg\" alt=\"Photo 3\" style=\"width: 30%;\"&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#project-structure","title":"Project Structure","text":"<p>Your final project should look like:</p> <pre><code>regulatordocumentation/\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 deploy.yml\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 images/\n\u2502   \u2502   \u251c\u2500\u2500 screenshot.png\n\u2502   \u2502   \u2514\u2500\u2500 diagram.jpg\n\u2502   \u251c\u2500\u2500 stylesheets/\n\u2502   \u2502   \u2514\u2500\u2500 extra.css\n\u2502   \u251c\u2500\u2500 user-guide/\n\u2502   \u2502   \u251c\u2500\u2500 getting-started.md\n\u2502   \u2502   \u2514\u2500\u2500 installation.md\n\u2502   \u251c\u2500\u2500 CNAME (if using custom domain)\n\u2502   \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 site/ (auto-generated, ignore this)\n\u251c\u2500\u2500 mkdocs.yml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#common-issues","title":"Common Issues","text":"<p>\"Site not updating\" - Check Actions tab for build errors - Ensure GitHub Pages source is set to \"GitHub Actions\" - Hard refresh browser (Ctrl+F5)</p> <p>\"Images not showing\" - Check image paths (relative to the markdown file) - Ensure images are in <code>docs/images/</code> folder - Check image file names (case sensitive)</p> <p>\"Navigation not working\" - Verify <code>nav</code> section in <code>mkdocs.yml</code> syntax - Ensure file paths in nav match actual file locations - Check for YAML indentation errors</p> <p>\"Custom domain not working\" - Check that <code>docs/CNAME</code> file contains docs.xengineering.net - Verify DNS CNAME record points to <code>markliquid1.github.io</code> - Allow 24-48 hours for DNS propagation</p>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#testing-changes-locally","title":"Testing Changes Locally","text":"<p>Before pushing changes:</p> <pre><code>mkdocs serve\n</code></pre> <p>Visit <code>http://127.0.0.1:8000</code> to preview your changes locally.</p>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#why-this-setup-is-better","title":"Why This Setup is Better","text":"<p>Avoid <code>mkdocs gh-deploy</code> - it deploys from local files (including uncommitted changes) causing sync issues between your source code and live site.</p> <p>GitHub Actions Benefits: - Only deploys committed code - Full traceability of what's deployed - Works for teams - Automatic deployment on every push - No local environment dependencies</p>"},{"location":"localstuff%20for%20Xengineering%20ref/mkdocs_setup_guide/#quick-reference-commands","title":"Quick Reference Commands","text":"<pre><code># Navigate to project\ncd ~/Projects/regulatordocumentation\n\n# Create new page\necho \"# Page Title\" &gt; docs/new-page.md\n\n# Add images\ncp ~/Desktop/image.png docs/images/\n\n# Deploy changes\ncd ~/Projects/regulatordocumentation\ngit add .\ngit commit -m \"Update docs\"\ngit push origin main\n\n# Test locally\nmkdocs serve\n</code></pre> <p>Remember: After initial setup, your workflow is simply edit \u2192 commit \u2192 push. GitHub handles the rest automatically.</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/","title":"XRegulator Secure OTA System - Complete Documentation","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#table-of-contents","title":"Table of Contents","text":"<ol> <li>System Architecture &amp; Key Decisions</li> <li>ESP32 Firmware &amp; Partition Configuration</li> <li>Build and Deploy Process</li> <li>Streaming Tar Parser Implementation</li> <li>Server Configuration</li> <li>Security Implementation</li> <li>Troubleshooting &amp; Common Issues</li> <li>Future Improvements</li> </ol>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#system-architecture-key-decisions","title":"System Architecture &amp; Key Decisions","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#core-design-philosophy","title":"Core Design Philosophy","text":"<ul> <li>Streaming tar extraction: Handle large packages without memory allocation issues</li> <li>Dual content updates: Firmware (.bin) + web files (HTML/CSS/JS) in single package</li> <li>Factory recovery system: GPIO15-triggered fallback to known-good firmware</li> <li>Military-grade security: RSA-4096 signatures with air-gapped private key</li> <li>Production reliability: Comprehensive error handling and validation</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#technology-stack","title":"Technology Stack","text":"<ul> <li>ESP32: 16MB flash with custom partition scheme</li> <li>Package Format: Uncompressed tar archives (ustar format)</li> <li>Security: RSA-4096 + SHA-256 signatures</li> <li>Server: PHP on CloudPanel/nginx with Let's Encrypt SSL</li> <li>Build System: Arduino CLI with custom deployment script</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#file-structure-overview","title":"File Structure Overview","text":"<pre><code>/Users/joeceo/Documents/Arduino/Xregulator/         # Local development\n\u251c\u2500\u2500 Xregulator.ino                                  # Main ESP32 firmware\n\u251c\u2500\u2500 build_and_deploy.sh                            # Automated build/deploy script\n\u251c\u2500\u2500 data/                                           # Web files for OTA\n\u2502   \u251c\u2500\u2500 index.html                                 # Main dashboard\n\u2502   \u251c\u2500\u2500 script.js                                  # JavaScript logic\n\u2502   \u251c\u2500\u2500 styles.css                                 # Styling\n\u2502   \u251c\u2500\u2500 uPlot.iife.min.js                         # Charting library\n\u2502   \u2514\u2500\u2500 uPlot.min.css                             # Chart styling\n\u251c\u2500\u2500 build/                                         # Arduino compilation output\n\u2514\u2500\u2500 partitions.csv                                # ESP32 partition scheme\n\nota.xengineering.net (Server)                     # Production OTA server\n\u251c\u2500\u2500 api/firmware/\n\u2502   \u251c\u2500\u2500 check.php                                 # Update availability\n\u2502   \u251c\u2500\u2500 download.php                              # Package download\n\u2502   \u2514\u2500\u2500 signature.php                             # Signature download\n\u251c\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 ota_config.php                           # Version &amp; public key\n\u2502   \u2514\u2500\u2500 security.php                             # Rate limiting\n\u251c\u2500\u2500 firmware/                                     # Signed tar packages\n\u251c\u2500\u2500 signatures/                                   # Base64 RSA signatures\n\u2514\u2500\u2500 tmp/                                          # Rate limiting data\n\n/Users/joeceo/private_key.pem                     # Air-gapped signing key\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#esp32-firmware-partition-configuration","title":"ESP32 Firmware &amp; Partition Configuration","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#partition-scheme-16mb-flash","title":"Partition Scheme (16MB Flash)","text":"<pre><code># Name,     Type, SubType,  Offset,   Size,     Flags\nnvs,        data, nvs,      0x9000,   0x5000,\notadata,    data, ota,      0xe000,   0x2000,\nfactory,    app,  factory,  0x10000,  0x400000,  # 4MB - Factory firmware (GPIO15 recovery)\nota_0,      app,  ota_0,    0x410000, 0x400000,  # 4MB - Production firmware (OTA updates)\nfactory_fs, data, spiffs,   0x810000, 0x200000,  # 2MB - Factory web files (never change)\nprod_fs,    data, spiffs,   0xa10000, 0x200000,  # 2MB - Production web files (OTA updated)\nuserdata,   data, spiffs,   0xc10000, 0x3D0000,  # ~4MB - Data logs, config\ncoredump,   data, coredump, 0xFF0000, 0x10000,   # Debug data\n</code></pre> <p>Partition Strategy: - Factory partitions: Permanent \"golden image\" for GPIO15 recovery - OTA partitions: Where updates are installed - 4MB firmware partitions: Current usage ~1.4MB, provides 2.6MB growth room - Separate filesystems: Factory vs production web files</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#arduino-ide-configuration","title":"Arduino IDE Configuration","text":"<pre><code># Required settings in Arduino IDE:\nBoard: \"ESP32S3 Dev Module\"\nFlash Size: \"16MB (128Mb)\"\nPartition Scheme: \"Custom\" (uses partitions.csv)\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#key-firmware-features","title":"Key Firmware Features","text":"<pre><code>// Version identification\nconst char* FIRMWARE_VERSION = \"2.4.0\";  // Update this for each release\n\n// Recovery mode check (GPIO15 pulled low on boot)\nvoid setup() {\n  pinMode(15, INPUT_PULLUP);\n  if (digitalRead(15) == LOW) {\n    Serial.println(\"\ud83d\udd27 RECOVERY MODE: Reverting to factory firmware\");\n    esp_ota_set_boot_partition(esp_partition_find_first(\n      ESP_PARTITION_TYPE_APP, ESP_PARTITION_SUBTYPE_APP_FACTORY, NULL));\n    ESP.restart();\n  }\n}\n\n// Update check frequency (configurable)\nstatic unsigned long lastUpdateCheck = 0;\nif (WiFi.status() == WL_CONNECTED &amp;&amp; millis() - lastUpdateCheck &gt; 300000) {  // 5 minutes\n  lastUpdateCheck = millis();\n  checkForOTAUpdate();\n}\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#streaming-tar-extractor-structure","title":"Streaming Tar Extractor Structure","text":"<pre><code>struct StreamingExtractor {\n  // Tar parsing state\n  bool inTarHeader;\n  uint8_t tarHeader[512];\n  size_t tarHeaderPos;\n  String currentFileName;\n  size_t currentFileSize;\n  size_t currentFilePos;\n  bool isCurrentFileFirmware;\n\n  // Padding state for proper streaming\n  bool inPadding;\n  size_t paddingRemaining;\n\n  // OTA state\n  esp_ota_handle_t otaHandle;\n  const esp_partition_t* otaPartition;\n  bool otaStarted;\n\n  // LittleFS state\n  File currentWebFile;\n  bool prodFSMounted;\n\n  // Hash verification\n  mbedtls_md_context_t hashCtx;\n  bool hashStarted;\n};\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#build-and-deploy-process","title":"Build and Deploy Process","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#automated-build-script","title":"Automated Build Script","text":"<p>Location: <code>/Users/joeceo/Documents/Arduino/Xregulator/build_and_deploy.sh</code></p> <pre><code># Make executable and run\nchmod +x build_and_deploy.sh\n./build_and_deploy.sh 2.5.0\n</code></pre> <p>What the script does: 1. Cleans build artifacts and Arduino caches 2. Compiles firmware using Arduino CLI with custom FQBN 3. Creates tar package containing firmware.bin + data/ folder contents 4. Signs package with RSA-4096 private key 5. Uploads to server via sshpass/scp 6. Updates server configuration to new version 7. Tests deployment with curl</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#manual-build-process","title":"Manual Build Process","text":"<pre><code># Navigate to project\ncd /Users/joeceo/Documents/Arduino/Xregulator\n\n# Clean previous builds\nrm -rf build/ temp_package/ firmware_*.tar firmware_*.sig.*\narduino-cli cache clean\n\n# Compile with custom partition scheme\narduino-cli compile --fqbn \"esp32:esp32:esp32s3:FlashSize=16M,PartitionScheme=custom\" --output-dir ./build .\n\n# Verify compilation\nls -la build/Xregulator.ino.bin\necho \"Firmware size: $(wc -c &lt; build/Xregulator.ino.bin) bytes\"\n\n# Create package\nmkdir temp_package\ncp build/Xregulator.ino.bin temp_package/firmware.bin\ncp -r data/* temp_package/\ntar --format=ustar -cf \"firmware_2.5.0.tar\" -C temp_package .\n\n# Sign package (air-gapped machine)\nopenssl dgst -sha256 -sign /Users/joeceo/private_key.pem -out firmware_2.5.0.sig.binary firmware_2.5.0.tar\nbase64 -i firmware_2.5.0.sig.binary | tr -d '\\n' &gt; firmware_2.5.0.sig.base64\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#server-deployment","title":"Server Deployment","text":"<pre><code># Upload firmware package\nsshpass -p \"a47H8IE0vgeEe5efgwe\" scp firmware_2.5.0.tar root@host.xengineering.net:/home/ota/htdocs/ota.xengineering.net/firmware/\n\n# Upload signature\nsshpass -p \"a47H8IE0vgeEe5efgwe\" ssh root@host.xengineering.net \"echo '$(cat firmware_2.5.0.sig.base64)' &gt; /home/ota/htdocs/ota.xengineering.net/signatures/firmware_2.5.0.sig\"\n\n# Update server version\nsshpass -p \"a47H8IE0vgeEe5efgwe\" ssh root@host.xengineering.net \"\n  cd /home/ota/htdocs/ota.xengineering.net\n  sed -i \\\"s/CURRENT_FIRMWARE_VERSION', '[^']*'/CURRENT_FIRMWARE_VERSION', '2.5.0'/\\\" config/ota_config.php\n  rm -f tmp/rate_limits.json  # Clear rate limits for testing\n\"\n\n# Test deployment\ncurl -s -H \"Device-ID: TEST123\" -H \"Current-Version: 2.4.0\" -H \"Hardware-Version: ESP32-S3\" https://ota.xengineering.net/api/firmware/check.php | python3 -m json.tool\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#streaming-tar-parser-implementation","title":"Streaming Tar Parser Implementation","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#key-technical-achievement","title":"Key Technical Achievement","text":"<p>The streaming tar parser was the critical breakthrough that made this system work. It solves the fundamental problem of processing large firmware packages on memory-constrained ESP32 devices.</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#problem-solved","title":"Problem Solved","text":"<ul> <li>Memory limitation: ESP32 can't load 1.8MB+ packages into RAM</li> <li>Dual content: Need to extract both firmware.bin and web files</li> <li>Streaming requirement: Process tar archive as it downloads</li> <li>Padding complexity: Tar files use 512-byte alignment with padding</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#core-parser-logic","title":"Core Parser Logic","text":"<pre><code>bool processDataChunk(StreamingExtractor* extractor, uint8_t* data, size_t dataSize) {\n  size_t processed = 0;\n\n  while (processed &lt; dataSize) {\n    if (extractor-&gt;inPadding) {\n      // Skip tar padding bytes across chunk boundaries\n      size_t toSkip = min(extractor-&gt;paddingRemaining, dataSize - processed);\n      processed += toSkip;\n      extractor-&gt;paddingRemaining -= toSkip;\n\n      if (extractor-&gt;paddingRemaining == 0) {\n        extractor-&gt;inPadding = false;\n        extractor-&gt;inTarHeader = true;\n        extractor-&gt;tarHeaderPos = 0;\n      }\n\n    } else if (extractor-&gt;inTarHeader) {\n      // Read 512-byte tar header across chunks\n      size_t headerRemaining = 512 - extractor-&gt;tarHeaderPos;\n      size_t toCopy = min(headerRemaining, dataSize - processed);\n      memcpy(extractor-&gt;tarHeader + extractor-&gt;tarHeaderPos, data + processed, toCopy);\n      extractor-&gt;tarHeaderPos += toCopy;\n      processed += toCopy;\n\n      if (extractor-&gt;tarHeaderPos &gt;= 512) {\n        // Complete header - check for end of archive (512 zeros)\n        bool allZeros = true;\n        for (int i = 0; i &lt; 512; i++) {\n          if (extractor-&gt;tarHeader[i] != 0) {\n            allZeros = false;\n            break;\n          }\n        }\n\n        if (allZeros) {\n          Serial.println(\"\u2705 End of tar archive detected - extraction complete!\");\n          return true; // SUCCESS! Archive is complete\n        }\n\n        // Parse file header and setup for data extraction\n        if (!parseTarHeader(extractor)) {\n          return false;\n        }\n        extractor-&gt;inTarHeader = false;\n      }\n\n    } else {\n      // Extract file data to appropriate destination\n      size_t fileRemaining = extractor-&gt;currentFileSize - extractor-&gt;currentFilePos;\n      size_t toWrite = min(fileRemaining, dataSize - processed);\n\n      if (toWrite &gt; 0 &amp;&amp; extractor-&gt;currentFileName.length() &gt; 0) {\n        if (extractor-&gt;isCurrentFileFirmware &amp;&amp; extractor-&gt;otaStarted) {\n          // Write to OTA partition\n          esp_ota_write(extractor-&gt;otaHandle, data + processed, toWrite);\n        } else if (extractor-&gt;currentWebFile) {\n          // Write to LittleFS\n          extractor-&gt;currentWebFile.write(data + processed, toWrite);\n        }\n      }\n\n      extractor-&gt;currentFilePos += toWrite;\n      processed += toWrite;\n\n      // File complete - calculate padding for next file\n      if (extractor-&gt;currentFilePos &gt;= extractor-&gt;currentFileSize) {\n        // Close current file\n        if (extractor-&gt;currentWebFile) {\n          extractor-&gt;currentWebFile.close();\n        }\n\n        // Calculate 512-byte boundary padding\n        size_t padding = (512 - (extractor-&gt;currentFileSize % 512)) % 512;\n        if (padding &gt; 0) {\n          extractor-&gt;inPadding = true;\n          extractor-&gt;paddingRemaining = padding;\n        } else {\n          extractor-&gt;inTarHeader = true;\n          extractor-&gt;tarHeaderPos = 0;\n        }\n      }\n    }\n  }\n  return true;\n}\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#file-routing-logic","title":"File Routing Logic","text":"<pre><code>bool parseTarHeader(StreamingExtractor* extractor) {\n  // Validate ustar magic at offset 257\n  if (memcmp(extractor-&gt;tarHeader + 257, \"ustar\", 5) != 0) {\n    return false;\n  }\n\n  // Extract filename and size\n  char rawFilename[101];\n  memcpy(rawFilename, extractor-&gt;tarHeader, 100);\n  extractor-&gt;currentFileName = String(rawFilename).trim();\n\n  // Parse octal file size from header\n  char sizeStr[13];\n  memcpy(sizeStr, extractor-&gt;tarHeader + 124, 12);\n  extractor-&gt;currentFileSize = 0;\n  for (int i = 0; i &lt; 12 &amp;&amp; sizeStr[i] &gt;= '0' &amp;&amp; sizeStr[i] &lt;= '7'; i++) {\n    extractor-&gt;currentFileSize = extractor-&gt;currentFileSize * 8 + (sizeStr[i] - '0');\n  }\n\n  // Route file to appropriate destination\n  if (extractor-&gt;currentFileName.equals(\"firmware.bin\")) {\n    // Initialize OTA partition write\n    extractor-&gt;otaPartition = esp_ota_get_next_update_partition(NULL);\n    esp_ota_begin(extractor-&gt;otaPartition, extractor-&gt;currentFileSize, &amp;extractor-&gt;otaHandle);\n    extractor-&gt;otaStarted = true;\n    extractor-&gt;isCurrentFileFirmware = true;\n  } else if (extractor-&gt;currentFileName.indexOf('.') &gt; 0) {\n    // Mount LittleFS and create web file\n    if (!extractor-&gt;prodFSMounted) {\n      LittleFS.begin(true, \"/web\", 10, \"prod_fs\");\n      extractor-&gt;prodFSMounted = true;\n    }\n    String filePath = \"/\" + extractor-&gt;currentFileName;\n    extractor-&gt;currentWebFile = LittleFS.open(filePath, \"w\");\n  }\n\n  return true;\n}\n</code></pre> <p>The streaming parser handles tar files by processing them in 1KB chunks as they download, routing firmware.bin to the OTA partition and web files to LittleFS, while properly managing 512-byte tar padding across chunk boundaries.</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#server-configuration","title":"Server Configuration","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#php-based-ota-server","title":"PHP-based OTA Server","text":"<p>Location: <code>ota.xengineering.net</code> (CloudPanel/nginx) Path: <code>/home/ota/htdocs/ota.xengineering.net/</code></p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#api-endpoints","title":"API Endpoints","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#update-check-apifirmwarecheckphp","title":"Update Check: <code>/api/firmware/check.php</code>","text":"<pre><code># Test update availability\ncurl -H \"Device-ID: TEST123\" \\\n     -H \"Current-Version: 2.4.0\" \\\n     -H \"Hardware-Version: ESP32-S3\" \\\n     https://ota.xengineering.net/api/firmware/check.php\n</code></pre> <p>Expected Response: <pre><code>{\n  \"hasUpdate\": true,\n  \"version\": \"2.5.0\",\n  \"firmwareUrl\": \"https://ota.xengineering.net/api/firmware/download.php?version=2.5.0\",\n  \"signatureUrl\": \"https://ota.xengineering.net/api/firmware/signature.php?version=2.5.0\",\n  \"firmwareSize\": 1815040,\n  \"changelog\": \"Update to version 2.5.0\",\n  \"releaseDate\": \"2025-07-06T15:09:27-04:00\"\n}\n</code></pre></p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#package-download-apifirmwaredownloadphp","title":"Package Download: <code>/api/firmware/download.php</code>","text":"<ul> <li>Security: Verifies signature before serving</li> <li>Headers: Requires Device-ID and Current-Version</li> <li>Rate limiting: 5 downloads per device per day</li> <li>Content-Type: <code>application/octet-stream</code></li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#signature-download-apifirmwaresignaturephp","title":"Signature Download: <code>/api/firmware/signature.php</code>","text":"<ul> <li>Format: Base64-encoded RSA-4096 signature</li> <li>Length: 684-685 characters (both normal)</li> <li>Content-Type: <code>text/plain</code></li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#configuration-files","title":"Configuration Files","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#version-configuration-configota_configphp","title":"Version Configuration: <code>/config/ota_config.php</code>","text":"<pre><code>&lt;?php\ndefine('CURRENT_FIRMWARE_VERSION', '2.5.0');\ndefine('OTA_PUBLIC_KEY', '-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAp2sRgMjD4wazKHo6Rk3g\n[... full RSA-4096 public key ...]\n-----END PUBLIC KEY-----');\n?&gt;\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#security-configuration-configsecurityphp","title":"Security Configuration: <code>/config/security.php</code>","text":"<pre><code>&lt;?php\ndefine('RATE_LIMIT_CHECKS_PER_HOUR', 10);\ndefine('RATE_LIMIT_DOWNLOADS_PER_DAY', 5);\n\n// Rate limiting implementation\nfunction checkRateLimit($deviceId, $action) {\n    $rateLimits = json_decode(file_get_contents('/home/ota/htdocs/ota.xengineering.net/tmp/rate_limits.json'), true) ?: [];\n    // ... implementation\n}\n?&gt;\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#server-maintenance-commands","title":"Server Maintenance Commands","text":"<pre><code># SSH into server\nssh root@host.xengineering.net\n\n# Check OTA server status\ncd /home/ota/htdocs/ota.xengineering.net\nls -la firmware/        # Check firmware files\nls -la signatures/      # Check signature files\ncat config/ota_config.php | grep CURRENT_FIRMWARE_VERSION\n\n# Clear rate limits for testing\nrm -f tmp/rate_limits.json\n\n# Check server logs\ntail -f /var/log/nginx/access.log\ntail -f /var/log/nginx/error.log\n\n# Check disk space\ndf -h /home/ota/\ndu -sh firmware/        # Firmware storage usage\n\n# Clean old firmware files (if needed)\nfind firmware/ -name \"firmware_*.tar\" -mtime +30 -delete\nfind signatures/ -name \"firmware_*.sig\" -mtime +30 -delete\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#security-implementation","title":"Security Implementation","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#rsa-4096-cryptographic-security","title":"RSA-4096 Cryptographic Security","text":"<ul> <li>Algorithm: RSA-4096 with SHA-256 hashing</li> <li>Key storage: Private key air-gapped at <code>/Users/joeceo/private_key.pem</code></li> <li>Signature size: 512 bytes (684-685 characters base64)</li> <li>Security level: Military-grade (future-proof against quantum computing)</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#air-gapped-signing-process","title":"Air-Gapped Signing Process","text":"<pre><code># On offline machine only:\ncd /Users/joeceo/Documents/Arduino/Xregulator\n\n# Sign firmware package\nopenssl dgst -sha256 -sign /Users/joeceo/private_key.pem -out firmware_2.5.0.sig.binary firmware_2.5.0.tar\n\n# Convert to base64 for server upload\nbase64 -i firmware_2.5.0.sig.binary | tr -d '\\n' &gt; firmware_2.5.0.sig.base64\n\n# Display signature for manual server upload\ncat firmware_2.5.0.sig.base64\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#ssl-certificate-validation","title":"SSL Certificate Validation","text":"<pre><code>// ESP32 firmware - Let's Encrypt R10 intermediate certificate\nconst char* server_root_ca =\n  \"-----BEGIN CERTIFICATE-----\\n\"\n  \"MIIFBTCCAu2gAwIBAgIQS6hSk/eaL6JzBkuoBI110DANBgkqhkiG9w0BAQsFADBP\\n\"\n  // ... full certificate ...\n  \"-----END CERTIFICATE-----\\n\";\n\n// Usage in ESP32 code\nWiFiClientSecure client;\nclient.setCACert(server_root_ca);  // NEVER use client.setInsecure() in production!\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#signature-verification-process","title":"Signature Verification Process","text":"<pre><code>bool verifyPackageSignature(uint8_t* packageData, size_t packageSize, const String&amp; signatureBase64) {\n  // 1. Decode base64 signature\n  uint8_t signature[520];\n  size_t sigLength;\n  base64Decode(signatureBase64, signature, sizeof(signature), &amp;sigLength);\n\n  // 2. Hash complete package with SHA-256\n  uint8_t hash[32];\n  mbedtls_md_context_t ctx;\n  mbedtls_md_init(&amp;ctx);\n  const mbedtls_md_info_t* info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);\n  mbedtls_md_setup(&amp;ctx, info, 0);\n  mbedtls_md_starts(&amp;ctx);\n  mbedtls_md_update(&amp;ctx, packageData, packageSize);\n  mbedtls_md_finish(&amp;ctx, hash);\n\n  // 3. Verify RSA signature\n  mbedtls_pk_context pk;\n  mbedtls_pk_init(&amp;pk);\n  mbedtls_pk_parse_public_key(&amp;pk, (const unsigned char*)OTA_PUBLIC_KEY, strlen(OTA_PUBLIC_KEY) + 1);\n  int ret = mbedtls_pk_verify(&amp;pk, MBEDTLS_MD_SHA256, hash, 32, signature, sigLength);\n  mbedtls_pk_free(&amp;pk);\n\n  return (ret == 0);  // 0 = success\n}\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#security-key-rotation-process-planned","title":"Security Key Rotation Process (Planned)","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#step-1-discover-current-server-configuration","title":"Step 1: Discover Current Server Configuration","text":"<pre><code># SSH into server to find current paths and configuration\nssh root@host.xengineering.net\n\n# Find OTA configuration file location\nfind /home/ota -name \"ota_config.php\" -type f\n# Expected: /home/ota/htdocs/ota.xengineering.net/config/ota_config.php\n\n# View current public key configuration\ncat /home/ota/htdocs/ota.xengineering.net/config/ota_config.php | grep -A 20 \"OTA_PUBLIC_KEY\"\n\n# Check current firmware version\ngrep \"CURRENT_FIRMWARE_VERSION\" /home/ota/htdocs/ota.xengineering.net/config/ota_config.php\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#step-2-generate-new-rsa-4096-key-pair-air-gapped-machine","title":"Step 2: Generate New RSA-4096 Key Pair (Air-Gapped Machine)","text":"<pre><code># On completely offline machine - NEVER connected to internet\ncd /Users/joeceo/\n\n# Generate new private key\nopenssl genrsa -out private_key_new.pem 4096\n\n# Extract public key\nopenssl rsa -in private_key_new.pem -pubout -out public_key_new.pem\n\n# Secure private key permissions\nchmod 600 private_key_new.pem\n\n# Display new public key for copying\necho \"=== NEW PUBLIC KEY - Copy to ESP32 firmware and server ===\"\ncat public_key_new.pem\necho \"===========================================================\"\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#step-3-update-esp32-firmware-with-new-public-key","title":"Step 3: Update ESP32 Firmware with New Public Key","text":"<pre><code>// In Xregulator.ino, replace the OTA_PUBLIC_KEY constant:\nconst char* OTA_PUBLIC_KEY =\n  \"-----BEGIN PUBLIC KEY-----\\n\"\n  \"PASTE_NEW_PUBLIC_KEY_CONTENT_HERE\\n\"  // From public_key_new.pem\n  \"-----END PUBLIC KEY-----\\n\";\n\n// IMPORTANT: Firmware Version number MUST follow semantic versioning (x.y.z format)\n// - Only numeric digits and dots allowed (regex: ^\\d+\\.\\d+\\.\\d+$)\n// - Examples: \"1.0.0\", \"2.1.3\", \"10.5.22\" \u2705\n// - Invalid: \"1.1.1Retry\", \"v2.0.0\", \"2.1.0-beta\" \u274c\n// - Server uses PHP version_compare() for semantic comparison\n// - New version MUST be numerically higher than previous for updates to trigger\n// - Devices with higher versions will NOT receive \"downgrades\"\nconst char* FIRMWARE_VERSION = \"3.1.0\";  // Increment for key transition\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#step-4-deploy-key-transition-firmware-critical-use-old-private-key","title":"Step 4: Deploy Key Transition Firmware (Critical: Use OLD Private Key)","text":"<pre><code># Build firmware with new public key but sign with OLD private key\ncd /Users/joeceo/Documents/Arduino/Xregulator\n./build_and_deploy.sh 3.1.0\n\n# This uses OLD private key (/Users/joeceo/private_key.pem) for signing\n# All devices update to firmware containing NEW public key\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#step-5-update-server-configuration-with-new-public-key","title":"Step 5: Update Server Configuration with New Public Key","text":"<pre><code># SSH into server\nssh root@host.xengineering.net\n\n# Navigate to OTA directory\ncd /home/ota/htdocs/ota.xengineering.net\n\n# Backup current configuration\ncp config/ota_config.php config/ota_config.php.backup\n\n# Edit configuration file to add new public key\nnano config/ota_config.php\n\n# Replace the OTA_PUBLIC_KEY definition with content from public_key_new.pem\n# Ensure proper PHP string formatting with \\n for line breaks\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#step-6-wait-for-complete-fleet-update","title":"Step 6: Wait for Complete Fleet Update","text":"<pre><code># Monitor device update status\n# Wait until ALL devices have updated to version 3.1.0 (contains new public key)\n# Do NOT proceed until 100% of devices are updated\n\n# Check update logs/monitoring to confirm fleet status\n# This may take hours/days depending on device check frequency\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#step-7-complete-key-transition-air-gapped-machine","title":"Step 7: Complete Key Transition (Air-Gapped Machine)","text":"<pre><code># ONLY after ALL devices have new public key:\ncd /Users/joeceo/\n\n# Securely destroy old private key\nshred -vfz -n 3 private_key.pem\n\n# Activate new private key\nmv private_key_new.pem private_key.pem\nmv public_key_new.pem public_key.pem\n\n# Verify new key is active\nls -la private_key.pem\necho \"Key rotation complete - future firmware signed with new key\"\n</code></pre> <p>CRITICAL: Never destroy the old private key until ALL devices have updated to firmware containing the new public key!</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#firmwareweb-package-deployment-process","title":"Firmware/Web Package Deployment Process","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#current-process-same-machine-signing","title":"Current Process (Same-Machine Signing)","text":"<p>This is the current implementation using the automated build script. For production, this will be modified to use air-gapped signing.</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#step-1-prepare-new-firmware-version","title":"Step 1: Prepare New Firmware Version","text":"<pre><code>// Update version in Xregulator.ino\n// IMPORTANT: Firmware Version number MUST follow semantic versioning (x.y.z format)\n// - Only numeric digits and dots allowed (regex: ^\\d+\\.\\d+\\.\\d+$)\n// - Examples: \"1.0.0\", \"2.1.3\", \"10.5.22\" \u2705\n// - Invalid: \"1.1.1Retry\", \"v2.0.0\", \"2.1.0-beta\" \u274c\n// - Server uses PHP version_compare() for semantic comparison\n// - New version MUST be numerically higher than previous for updates to trigger\n// - Devices with higher versions will NOT receive \"downgrades\"\nconst char* FIRMWARE_VERSION = \"2.6.0\";  // Must be higher than current deployed version\n\n// Make any desired firmware changes\n// Update web files in data/ folder if needed\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#step-2-deploy-using-build-script","title":"Step 2: Deploy Using Build Script","text":"<pre><code># Navigate to project directory\ncd /Users/joeceo/Documents/Arduino/Xregulator\n\n# Ensure build script is executable\nchmod +x build_and_deploy.sh\n\n# Deploy new version (replace 2.6.0 with your target version)\n./build_and_deploy.sh 2.6.0\n\n# Script will:\n# 1. Clean previous builds and caches\n# 2. Compile firmware with Arduino CLI\n# 3. Create tar package (firmware.bin + data/ contents)\n# 4. Sign package with RSA-4096\n# 5. Upload to server\n# 6. Update server version configuration\n# 7. Test deployment\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#step-3-verify-deployment","title":"Step 3: Verify Deployment","text":"<pre><code># Test server response\ncurl -s -H \"Device-ID: TEST123\" \\\n        -H \"Current-Version: 2.5.0\" \\\n        -H \"Hardware-Version: ESP32-S3\" \\\n        https://ota.xengineering.net/api/firmware/check.php | python3 -m json.tool\n\n# Expected response with hasUpdate: true and new version\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#step-4-monitor-device-updates","title":"Step 4: Monitor Device Updates","text":"<pre><code># Devices will automatically discover and install update within their check interval\n# Default: 5 minutes (configurable in firmware)\n\n# Monitor device logs for update process:\n# \"\ud83d\udd0d Initial update check...\"\n# \"\ud83d\ude80 === STARTING OTA UPDATE PROCESS ===\"\n# \"\u2705 Streaming download and extraction completed\"\n# \"\ud83c\udf89 === STREAMING OTA UPDATE SUCCESSFUL ===\"\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#future-air-gapped-signing-process-production","title":"Future Air-Gapped Signing Process (Production)","text":"<p>For production deployment, the signing process will be modified to use an air-gapped machine:</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#modified-step-2-future-implementation","title":"Modified Step 2 (Future Implementation):","text":"<pre><code># Step 2a: Build package locally (without signing)\ncd /Users/joeceo/Documents/Arduino/Xregulator\n# Modified build script will create unsigned package\n\n# Step 2b: Transfer to air-gapped machine\n# USB transfer: firmware_2.6.0.tar\n\n# Step 2c: Sign on air-gapped machine\ncd /path/to/airgapped/signing/directory\nopenssl dgst -sha256 -sign /secure/path/private_key.pem -out firmware_2.6.0.sig.binary firmware_2.6.0.tar\nbase64 -i firmware_2.6.0.sig.binary | tr -d '\\n' &gt; firmware_2.6.0.sig.base64\n\n# Step 2d: Transfer signature back\n# USB transfer: firmware_2.6.0.sig.base64\n\n# Step 2e: Upload to server\n# Modified script uploads both package and signature\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#discover-server-file-structure","title":"Discover Server File Structure","text":"<pre><code># SSH into server to find current file paths\nssh root@host.xengineering.net\n\n# Find firmware storage location\nfind /home/ota -name \"firmware\" -type d\n# Expected: /home/ota/htdocs/ota.xengineering.net/firmware/\n\n# Find signature storage location  \nfind /home/ota -name \"signatures\" -type d\n# Expected: /home/ota/htdocs/ota.xengineering.net/signatures/\n\n# List current firmware files\nls -la /home/ota/htdocs/ota.xengineering.net/firmware/\n\n# List current signature files\nls -la /home/ota/htdocs/ota.xengineering.net/signatures/\n\n# Check current server version\ngrep \"CURRENT_FIRMWARE_VERSION\" /home/ota/htdocs/ota.xengineering.net/config/ota_config.php\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#troubleshooting-common-issues","title":"Troubleshooting &amp; Common Issues","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#build-issues","title":"Build Issues","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#arduino-cli-not-found","title":"Arduino CLI Not Found","text":"<pre><code># Install Arduino CLI (macOS)\nbrew install arduino-cli\n\n# Verify installation\narduino-cli version\n\n# Install ESP32 board package\narduino-cli core install esp32:esp32\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#compilation-errors","title":"Compilation Errors","text":"<pre><code># Clear all caches\narduino-cli cache clean\nrm -rf /tmp/arduino_*\nrm -rf ~/Library/Arduino15/packages/esp32/hardware/esp32/cache\n\n# Verify FQBN\narduino-cli compile --fqbn \"esp32:esp32:esp32s3:FlashSize=16M,PartitionScheme=custom\" --verify\n\n# Check partition file\ncat partitions.csv\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#build-script-permissions","title":"Build Script Permissions","text":"<pre><code># Make executable\nchmod +x build_and_deploy.sh\n\n# Check script variables\nhead -20 build_and_deploy.sh | grep -E \"(PROJECT_PATH|FQBN|PRIVATE_KEY)\"\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#runtime-issues","title":"Runtime Issues","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#no-ota-partition-available","title":"\"No OTA partition available\"","text":"<pre><code># Check partition scheme\narduino-cli compile --show-properties --fqbn \"esp32:esp32:esp32s3:FlashSize=16M,PartitionScheme=custom\"\n\n# Verify partitions.csv exists\nls -la partitions.csv\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#memory-issues-stack-overflow","title":"Memory Issues / Stack Overflow","text":"<pre><code># Monitor free heap during OTA\nSerial.printf(\"Free heap: %d bytes\\n\", ESP.getFreeHeap());\n\n# Reduce buffer sizes if needed (in ESP32 code)\nconst size_t CHUNK_SIZE = 512;  // Reduce from 1024 if memory issues\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#streaming-extraction-failed","title":"\"Streaming extraction failed\"","text":"<p>This was the critical bug - ensure end-of-archive detection returns success: <pre><code>// In processDataChunk() - verify this logic exists:\nif (allZeros) {\n  Serial.println(\"\u2705 End of tar archive detected - extraction complete!\");\n  return true; // CRITICAL: Must return true, not false!\n}\n</code></pre></p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#server-issues","title":"Server Issues","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#rate-limiting-http-429","title":"Rate Limiting (HTTP 429)","text":"<pre><code># Clear rate limits\nssh root@host.xengineering.net \"rm -f /home/ota/htdocs/ota.xengineering.net/tmp/rate_limits.json\"\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#signature-verification-failed","title":"Signature Verification Failed","text":"<pre><code># Check signature file\nssh root@host.xengineering.net \"wc -c /home/ota/htdocs/ota.xengineering.net/signatures/firmware_X.X.X.sig\"\n# Should be 684-685 characters\n\n# Verify base64 format (no line breaks)\nssh root@host.xengineering.net \"head -c 50 /home/ota/htdocs/ota.xengineering.net/signatures/firmware_X.X.X.sig\"\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#server-not-responding","title":"Server Not Responding","text":"<pre><code># Test server health\ncurl https://ota.xengineering.net/api/health.php\n\n# Check nginx status\nssh root@host.xengineering.net \"systemctl status nginx\"\n\n# Check PHP-FPM\nssh root@host.xengineering.net \"systemctl status php8.4-fpm\"\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#network-issues","title":"Network Issues","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#ssl-certificate-problems","title":"SSL Certificate Problems","text":"<pre><code># Test SSL certificate\nopenssl s_client -showcerts -servername ota.xengineering.net -connect ota.xengineering.net:443\n\n# Verify certificate in ESP32 code matches server\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#connection-refused","title":"Connection Refused","text":"<pre><code># Test connectivity\nping ota.xengineering.net\n\n# Test specific port\ntelnet ota.xengineering.net 443\n\n# Check firewall\nssh root@host.xengineering.net \"ufw status\"\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#debugging-commands","title":"Debugging Commands","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#esp32-serial-monitor","title":"ESP32 Serial Monitor","text":"<pre><code>// Add debug output in key functions\nSerial.printf(\"\ud83d\udce6 Processing file: %s (%d bytes)\\n\", fileName.c_str(), fileSize);\nSerial.printf(\"\ud83d\udcbe Free heap: %d bytes\\n\", ESP.getFreeHeap());\nSerial.printf(\"\ud83d\udcca Progress: %d%% (%d/%d bytes)\\n\", progress, downloaded, total);\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#server-side-debugging","title":"Server-side Debugging","text":"<pre><code># Monitor real-time logs\nssh root@host.xengineering.net \"tail -f /var/log/nginx/access.log\"\n\n# Check PHP errors\nssh root@host.xengineering.net \"tail -f /var/log/php8.4-fpm.log\"\n\n# Test API directly\ncurl -v -H \"Device-ID: DEBUG\" -H \"Current-Version: 0.0.0\" https://ota.xengineering.net/api/firmware/check.php\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#future-improvements","title":"Future Improvements","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#security-enhancements","title":"Security Enhancements","text":"<ol> <li>Device authentication: Beyond Device-ID, implement certificate-based auth</li> <li>Firmware encryption: AES encryption for firmware packages</li> <li>Rollback protection: Prevent downgrade attacks</li> <li>Audit logging: Complete chain of custody for all updates</li> </ol>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#operational-improvements","title":"Operational Improvements","text":"<ol> <li>Gradual rollouts: Deploy to percentage of fleet first</li> <li>Health monitoring: Device health checks before/after updates</li> <li>Automatic rollback: Detect failed updates and revert</li> <li>Delta updates: Only send changed files, not complete packages</li> </ol>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#build-process-automation","title":"Build Process Automation","text":"<ol> <li>CI/CD integration: GitHub Actions for automated builds</li> <li>Test automation: Automated testing on ESP32 hardware</li> <li>Staging environment: Test updates before production deployment</li> <li>Notification system: Alert on build failures or security issues</li> </ol>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#package-format-evolution","title":"Package Format Evolution","text":"<ol> <li>Compression: Add gzip support for smaller packages</li> <li>Multiple architectures: Support ESP32, ESP32-S3, ESP32-C3 in one package</li> <li>Incremental updates: Binary diff patches for large firmware</li> <li>Metadata enhancement: More detailed changelog and dependency info</li> </ol>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#air-gapped-signing-improvements","title":"Air-Gapped Signing Improvements","text":"<ol> <li>Hardware security modules: Use YubiKey or similar for signing</li> <li>Multi-signature: Require multiple keys for critical updates</li> <li>Key escrow: Secure backup and recovery procedures</li> <li>Signing ceremony: Formal process for production releases</li> </ol>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#system-status-verified-metrics","title":"System Status &amp; Verified Metrics","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#verified-working-july-6-2025","title":"Verified Working (July 6, 2025)","text":"<ul> <li>\u2705 Complete streaming tar parser with proper end-of-archive handling</li> <li>\u2705 RSA-4096 signature verification (military-grade security)</li> <li>\u2705 Dual content updates (firmware + web files)</li> <li>\u2705 Factory recovery system (GPIO15 fallback)</li> <li>\u2705 Memory-efficient operation (1KB streaming chunks)</li> <li>\u2705 Production-ready error handling and validation</li> <li>\u2705 Automated build and deploy pipeline</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#current-package-metrics","title":"Current Package Metrics","text":"<ul> <li>Package size: ~1.8MB (1,815,040 bytes tested)</li> <li>Firmware size: ~1.4MB (room for 2.6MB growth)</li> <li>Web files: ~400KB (HTML/CSS/JS dashboard)</li> <li>Signature: 684-685 characters base64 (both normal)</li> <li>Memory usage: &lt;1KB RAM for streaming (vs 1.8MB+ for loading)</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#server-configuration_1","title":"Server Configuration","text":"<ul> <li>Domain: ota.xengineering.net</li> <li>SSL: Let's Encrypt (auto-renewed)</li> <li>Rate limits: 10 checks/hour, 5 downloads/day per device</li> <li>Platform: CloudPanel/nginx/PHP 8.4</li> <li>Security: Input validation, rate limiting, signature verification</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_ota_docs%20V3%20/#file-paths-reference-for-aiautomation","title":"File Paths Reference (for AI/automation)","text":"<pre><code>Local Development:\n/Users/joeceo/Documents/Arduino/Xregulator/          # Project root\n/Users/joecoe/private_key.pem                        # Air-gapped signing key\n\nServer Paths:\n/home/ota/htdocs/ota.xengineering.net/              # Web root\n/home/ota/htdocs/ota.xengineering.net/config/ota_config.php  # Version config\n/home/ota/htdocs/ota.xengineering.net/firmware/     # Package storage\n/home/ota/htdocs/ota.xengineering.net/signatures/   # Signature storage\n\nArduino CLI:\nFQBN: \"esp32:esp32:esp32s3:FlashSize=16M,PartitionScheme=custom\"\nBuild Output: /Users/joeceo/Documents/Arduino/Xregulator/build/\n</code></pre> <p>This system provides military-grade OTA security with streaming capabilities that can handle large firmware packages on memory-constrained ESP32 devices. The breakthrough streaming tar parser enables dual-content updates (firmware + web files) while maintaining cryptographic security through RSA-4096 signatures and air-gapped private key management.</p> <p>Key Achievement: Successfully solved the \"package too large for ESP32 memory\" problem through streaming extraction, enabling sophisticated IoT devices with rich web interfaces to update reliably and securely.</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/","title":"Alternator Regulator Cloud Platform - System Planning Document","text":"<p>// https://supabase-nine-ashy.vercel.app/</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#technology-platform-decision","title":"Technology Platform Decision","text":"<p>Selected Platform: Supabase + Vercel - Backend: Supabase for PostgreSQL database, auto-generated APIs, and authentication - Frontend: Vercel for dashboard hosting and deployment - Security: True isolation - OTA server separate from dashboard infrastructure - AI-friendly development with extensive code generation capabilities for both platforms - Predictable costs starting free, scaling to ~$25-45/month for 500 users</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#platform-comparison-selection-rationale","title":"Platform Comparison &amp; Selection Rationale","text":"<p>Firebase (Rejected): - NoSQL database cannot handle complex leaderboard queries (no JOINs, limited sorting) - Simple queries like \"fastest 35ft sailboat\" require complex workarounds - Real-time features good but terrible for analytics - Unpredictable costs with potential spikes</p> <p>Traditional VPS + PostgreSQL (Considered): - Perfect for relational data and complex queries - Full control and predictable costs ($30/month) - More setup work and server management required - Less AI development assistance available</p> <p>Supabase + Vercel (Selected): - Best of both worlds: PostgreSQL + modern real-time features + global hosting - Security isolation: Dashboard completely separate from OTA server - Auto-generated APIs reduce backend coding - Extensive AI training data for code generation on both platforms - Built-in authentication and security - Zero server management for dashboard - Can evolve from simple analytics to social platform</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#hosting-architecture-security","title":"Hosting Architecture &amp; Security","text":"<p>Infrastructure Separation: - <code>ota.xengineering.net</code> \u2192 Existing VPS (firmware updates only, unchanged) - <code>dashboard.xengineering.net</code> \u2192 Vercel hosting (dashboard frontend) - <code>yourproject.supabase.co</code> \u2192 Supabase managed backend (data &amp; APIs)</p> <p>Security Benefits: - True isolation: OTA server compromise cannot affect dashboard - Minimal attack surface: OTA server stays exactly as-is - Managed security: Supabase and Vercel handle security patches - Separate credentials: No shared access between systems</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#ai-development-workflow-advantages","title":"AI Development Workflow Advantages","text":"<ul> <li>ChatGPT can generate complete Supabase + Vercel projects</li> <li>Vercel has massive AI training data due to popularity</li> <li>Standard PostgreSQL queries are well-known to AI</li> <li>React dashboard components easily generated</li> <li>Authentication flows follow standard patterns</li> <li>Minimal learning curve for non-web developers</li> <li>4-hour planning doc speed maintained through development</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#1-user-registration-profile-data-fields","title":"1. User Registration &amp; Profile Data Fields","text":"Field Notes Public/Private UserName Display name on leaderboards/maps Public Boat Name/UserID Must enforce uniqueness Private Boat Type Sailboat / Catamaran / Powerboat / Trawler Public Boat Length (ft) Rounded to nearest foot Public Boat Make/Model Public Boat Year Public Home Port City/state or general region Public Usage Type Liveaboard / Seasonal Cruiser / Weekend Warrior Public Alternator Brand/Model Public Solar System Watts Nominal system wattage Public Battery Bank Voltage 12/24/48V Public Battery Capacity (Ah) User input Public Battery Type LiFePO4 / AGM / Lead Acid / Other Public Engine Make TBD Engine Horsepower TBD User Email For auth and support only Private Device UID ESP32 MAC address Private"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#2-leaderboard-categories","title":"2. Leaderboard Categories","text":"Category Definition Notes \ud83d\udd25 Alternator kWh production (1 day, 1 week, lifetime) Top total kWh output \ud83d\udd25 Solar harvest (1 day, 1 week) Max solar watts * hours \u26a0\ufe0f Most efficient energy usage Ratio of solar to alternator kWh (lifetime) -- interpret carefully \u2705 Highest instantaneous alternator output Top amps recorded \u2705 Fastest boat (sustained avg over 5 miles) Requires GPS speed smoothing \u2705 Fastest boat by type/size (5ft categories) Sailboats have \"motoring\" vs \"sailing\" categories \u26a0\ufe0f Fastest over predefined routes New England to Bahamas, etc. - Needs route logic, MVP unlikely \u26a0\ufe0f Distance sailed upwind in 1 day Tough calculation, placeholder \u26a0\ufe0f Farthest from home Distance from home port \u26a0\ufe0f Most remote location Distance to nearest landmass \u26a0\ufe0f Days at sea without port entry Continuous at-sea days \u26a0\ufe0f Engine hours champion Total engine runtime \u26a0\ufe0f Longest trip Longest continuous GPS track between power cycles \u26a0\ufe0f Highest and Lowest Average SOC Battery state efficiency \u26a0\ufe0f Highest power harvest in 24hrs Solar + alternator combined \u26a0\ufe0f Highest power use in 24 hrs Total consumption \u26a0\ufe0f Ambient temp/pressure extremes BMP180/BMP280 data required \u26a0\ufe0f Highest wind gust / sustained avg wind Needs wind sensor integration"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#3-personal-data-parameters","title":"3. Personal Data Parameters","text":"Parameter Aggregation Type Public/Private Miles traveled Daily, weekly, monthly, yearly Private Time motoring vs sailing Daily, weekly, monthly, yearly Private Solar kWh produced Daily, weekly, monthly, yearly Public summary Alternator kWh produced Daily, weekly, monthly, yearly Public summary Engine runtime Daily, weekly, monthly, yearly Private Alternator runtime Daily, weekly, monthly, yearly Private Fuel consumption Estimated from runtime Private Battery SOC % Daily avg, min, max Private Battery charge cycles Cumulative Private Max/min voltage/current/temperature Daily min/max Private GPS breadcrumb tracks Time series Private (aggregated public summaries) Speed averages Daily avg/max Public summary Sailing polar map data continuously adds new points to average boat speed vs. apparent wind map, using averages over last 10 minutes Private Maintenance reminders Based on engine hours (emailed) Private Messages / Interpersonal comms Future feature Private Monthly summaries Email with global and personal data Private"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#4-global-display-parameters","title":"4. Global Display Parameters","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#map-displays","title":"MAP DISPLAYS","text":"Parameter Displayed Live user positions (last 24h) Map pins (green) Historical locations Heatmap overlay (blue) Popular cruising areas Aggregated heatmap User breadcrumb trails Per-user on request Max wind gust locations Map overlay (if implemented) Average wind maps (lifetime) Map overlay (if implemented) Average wind maps (today) Map overlay (if implemented) Average temperature maps (today) Map overlay (if implemented) Weather integration layer Weather overlay Clickable boat details If public profile"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#numericalplotted-data-displays","title":"NUMERICAL/PLOTTED DATA DISPLAYS","text":"Parameter Displayed Total kWh produced (fleet) Dashboard stat Total devices sold / installed / active Dashboard stat Leaderboard rankings Numerical tables Personal performance plots User dashboard charts Fleet performance trends Graphs on global dashboard Environmental impact (CO2 saved etc) Marketing metrics Real-time device count Dashboard stat Geographic distribution Heat map Countries visited Count stat Currently online Real-time count"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#5-data-architecture-payload-structure","title":"5. Data Architecture &amp; Payload Structure","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#json-payload-organization","title":"JSON Payload Organization","text":"<ul> <li>Nested JSON objects for related data grouping</li> <li>Integer storage strategy for decimal values to avoid floating point errors</li> <li>Consistent scaling factors: voltage \u00d7 100, current \u00d7 10, GPS \u00d7 100000</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#example-6-hour-payload-structure","title":"Example 6-Hour Payload Structure","text":"<pre><code>{\n  \"timestamp\": \"2024-01-15T12:00:00Z\",\n  \"device_id\": \"esp32_aabbccddee\",\n  \"energy\": {\n    \"solar_kwh\": 25,          // 2.5 kWh \u00d7 10\n    \"alternator_kwh\": 18,     // 1.8 kWh \u00d7 10  \n    \"consumed_kwh\": 31        // 3.1 kWh \u00d7 10\n  },\n  \"battery\": {\n    \"soc_min\": 65, \"soc_max\": 89, \"soc_avg\": 78,\n    \"voltage_min\": 1280,      // 12.80V \u00d7 100\n    \"voltage_max\": 1420,      // 14.20V \u00d7 100\n    \"charge_cycles\": 2\n  },\n  \"alternator\": {\n    \"runtime_minutes\": 67,\n    \"max_amps\": 850,          // 85.0A \u00d7 10\n    \"avg_amps\": 420           // 42.0A \u00d7 10\n  },\n  \"navigation\": {\n    \"distance_miles\": 125,    // 12.5 miles \u00d7 10\n    \"avg_speed\": 52,          // 5.2 knots \u00d7 10  \n    \"start_lat\": 4365900,     // 43.659\u00b0 \u00d7 100000\n    \"start_lng\": -7025700     // -70.257\u00b0 \u00d7 100000\n  }\n}\n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#polar-data-collection-strategy","title":"Polar Data Collection Strategy","text":"<ul> <li>Collection frequency: Every 10 minutes while sailing</li> <li>Data volume impact: 6x more frequent than other metrics (36 points per 6-hour upload)</li> <li>Storage strategy: Include in main 6-hour payload for simplicity</li> <li>Future optimization: May require separate daily upload if payload becomes too large</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#6-final-decisions-made","title":"6. Final Decisions Made \u2705","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#data-sharing-privacy","title":"Data Sharing &amp; Privacy","text":"<ul> <li>All data is shared - requirement for having the product</li> <li>GPS precision reduced - remove last digits for privacy</li> <li>Pseudonym usernames - boat names encouraged</li> <li>Global leaderboards - no regional divisions</li> <li>All features free - no monetization strategy needed at this time</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#data-architecture","title":"Data Architecture","text":"<ul> <li>Data format: JSON for easiest expansion later</li> <li>GPS breadcrumb frequency: 1 point per hour (6 points per 6-hour upload batch. Need to make sure we have sufficient local space for 180 days)</li> <li>Sailing vs motoring detection: Engine on/off status determined ESP32-side (splits certain data categories such as max speed becomes \"max speed motoring\" and \"max speed sailing\")</li> <li>Local storage strategy: Use full userdata partition (3.9MB/0x3D0000 bytes) until cloud upload or 180 days is reached. After 180 days, I will try to overwrite oldest data first.</li> <li>Offline storage capacity is a non issue: ~487 days at 4 uploads/day (~2KB per payload)</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#upload-strategy","title":"Upload Strategy","text":"<ul> <li>6-hour upload frequency - major architectural decision</li> <li>Max/min/average aggregation - not raw data streams</li> <li>500 user target - stay in free tier initially</li> <li>Server-side validation - sanity checks before public data</li> <li>Retry logic: Don't even try uploading if internet is not detected. Exponential backoff (every 1 min for 1 hr. if failed, then 1x per 2 hours for 6 hours, then wait 24 hours)</li> <li>Only upload new data</li> <li>Keep 180 days of data locally anyway, no reason not to, unless it's significantly easier to manage if we keep deleting it after confirmed successful upload</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#authentication-user-management","title":"Authentication &amp; User Management","text":"<ul> <li>Device-tied authentication: One-time pairing during initial setup</li> <li>Auto-login from ESP32 app: Embedded auth tokens provide invisible access</li> <li>External access: Standard username/password from any device/location</li> <li>Multi-device support: Simultaneous access from ESP32 + phone + laptop</li> <li>No re-authentication required: Persistent sessions with optional refresh</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#hosting-infrastructure-strategy","title":"Hosting &amp; Infrastructure Strategy","text":"<ul> <li>OTA server isolation: Keep <code>ota.xengineering.net</code> completely separate and unchanged</li> <li>Dashboard hosting: <code>dashboard.xengineering.net</code> on Vercel for global performance</li> <li>Backend services: Supabase for database, APIs, and authentication</li> <li>Security architecture: True separation prevents cross-system compromise</li> <li>AI development priority: Chose Vercel for superior AI assistance and documentation</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#server-side-processing-requirements","title":"Server-Side Processing Requirements","text":"<ul> <li>Route-based leaderboards: MUST be server-side (geo-fence start/finish line detection)</li> <li>Sailing polar diagrams: Server-side aggregation of historical data</li> <li>Complex calculations: \"Farthest from home\", \"Most remote location\", \"Days at sea\"</li> <li>Fleet statistics aggregation</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#cost-scaling","title":"Cost &amp; Scaling","text":"<ul> <li>Target users: 500 users maximum for initial scale</li> <li>GPS storage cost: ~$0.18/month for GPS data (1GB over 5 years)</li> <li>Hosting costs: $0-45/month total (Supabase + Vercel)</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#admin-moderation","title":"Admin &amp; Moderation","text":"<ul> <li>Data validation: Implement framework to discard data beyond hardcoded physical limits</li> <li>Outlier handling: Delete bad data entirely. IE bad data becomes NAN or just not there</li> <li>Admin privileges: Required for editing leaderboards and user management</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#email-messaging-future","title":"Email &amp; Messaging (Future)","text":"<ul> <li>Monthly emails: Triggered 1st of month, requires unsubscribe mechanism</li> <li>Future messaging: Can be added later without schema changes. Plan userID structure robustly now.</li> <li>Messaging architecture: Will require server-mediated (not direct device-to-device due to NAT)</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#technical-implementation-decisions","title":"Technical Implementation Decisions","text":"<ul> <li>Sailing polar data frequency: Every 10 minutes while sailing</li> <li>Multi-user support: ONE USER PER DEVICE</li> <li>MVP complexity reduction: Drop \"Fastest-Over-Route\" and \"Sailing Polar Plots\" from initial release</li> <li>Admin dashboard: Need separate admin interface for moderation and system management</li> <li>Data retention: NO AGGREGATION NECESSARY, WE ALREADY SHOWED THAT, ON EITHER ESP32 OR SERVER SIDE. DATA SIZE IS TINY.</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#7-cost-analysis-projections","title":"7. Cost Analysis &amp; Projections","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#service-requirements-by-scale","title":"Service Requirements by Scale","text":"<p>Getting Started (4-10 users) - $0/month: - Supabase: Free tier (500MB database, 2GB bandwidth, 500K API requests) - Vercel: Free tier (100GB bandwidth) - Runway: 6+ months completely free</p> <p>Scale to 500 Users - $25-45/month: - Supabase Pro: $25/month (8GB database, 250GB bandwidth, 5M API requests) - Vercel Pro: $20/month (if bandwidth limits exceeded) - Total infrastructure cost: Predictable and manageable</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#projected-usage-500-users","title":"Projected Usage (500 users)","text":"<p>Database Storage: - User profiles: ~500 \u00d7 2KB = 1MB - Performance data: ~500 users \u00d7 4 uploads/day \u00d7 2KB \u00d7 365 days = ~1.4GB/year - GPS tracks: ~500 users \u00d7 24 points/day \u00d7 50 bytes \u00d7 365 days = ~220MB/year - Total Year 1: ~1.6GB (fits Pro tier)</p> <p>API Requests: - Data uploads: 500 users \u00d7 4 uploads/day \u00d7 30 days = 60,000/month - Dashboard access: 500 users \u00d7 10 sessions/month \u00d7 20 requests = 100,000/month - Total: ~160,000/month (fits Pro tier)</p> <p>Cost Progression: - Months 1-6: Free tier - Year 1-2: $25/month Pro tier - Year 3+: $25-45/month depending on usage growth</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#alternative-cost-comparison","title":"Alternative Cost Comparison","text":"<ul> <li>DigitalOcean VPS: $30/month (consistent, more management)</li> <li>AWS/Google Cloud: $40-100/month (complex pricing, can spike)</li> <li>Firebase: $20-80/month (unpredictable query costs)</li> <li>Self-hosted: $100-300/month for proper 500-user infrastructure</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#8-development-timeline-phases","title":"8. Development Timeline &amp; Phases","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#phase-1-core-system-month-1","title":"Phase 1: Core System (Month 1)","text":"<ul> <li>User registration and authentication</li> <li>Basic ESP32 data upload to Supabase</li> <li>Simple leaderboards (speed, energy production)</li> <li>Admin interface for user management</li> <li>Vercel deployment pipeline</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#phase-2-analytics-dashboard-month-2","title":"Phase 2: Analytics Dashboard (Month 2)","text":"<ul> <li>Personal analytics charts</li> <li>Historical data visualization</li> <li>Advanced leaderboard categories</li> <li>Admin moderation tools</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#phase-3-enhanced-features-month-3","title":"Phase 3: Enhanced Features (Month 3)","text":"<ul> <li>GPS track visualization</li> <li>Fleet statistics</li> <li>Email summaries</li> <li>Performance optimizations</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#phase-4-social-features-future","title":"Phase 4: Social Features (Future)","text":"<ul> <li>Real-time notifications</li> <li>Basic messaging system</li> <li>Collaborative features</li> <li>Advanced analytics</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#9-system-architecture","title":"9. System Architecture","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#overall-flow","title":"Overall Flow","text":"<p>Proposed flow: \u2705 ESP32 assembles 6-hour payload \u2192 Supabase REST API \u2192 PostgreSQL storage \u2192 Vercel-hosted dashboard with device-tied authentication</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#infrastructure-architecture","title":"Infrastructure Architecture","text":"<pre><code>ESP32 Device \u2192 Supabase (Backend) \u2192 Vercel (Frontend) \u2192 User Browser\n     \u2193              \u2193                    \u2193\nData Upload    PostgreSQL DB      dashboard.xengineering.net\nAuth Tokens    Auto-generated     Global CDN\n               REST APIs          \n</code></pre>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#personal-analytics-dashboard","title":"Personal Analytics Dashboard","text":"<p>Historical analysis only, accessible via webapp tab, mobile + desktop compatible.</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#loginauthentication-system","title":"Login/Authentication System","text":"<ol> <li>ESP32 generates unique device ID (MAC address)</li> <li>First-time setup: User connects to ESP32 hotspot for registration</li> <li>Registration webpage auto-populates device ID (invisible to user)</li> <li>User creates username/password \u2192 Supabase links account to device</li> <li>ESP32 stores auth token locally for embedded webpage access</li> <li>Daily usage: ESP32 app provides automatic login via embedded token</li> <li>External access: Username/password login from any device</li> <li>Recovery: Factory reset allows re-pairing to new account</li> </ol>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#user-experience-flow","title":"User Experience Flow","text":"<p>First-Time Setup (5 minutes): - Connect to ESP32 WiFi \u2192 Registration page opens automatically - Enter: Username, Email, Password, Boat details - Device ID pre-filled (user doesn't see technical details) - Click \"Create Account\" \u2192 Done</p> <p>Daily Usage (Invisible): - Open ESP32 app \u2192 Personal dashboard loads automatically - No login screens, no password prompts - Full access to personal data, leaderboards, global stats</p> <p>Remote Access (Standard): - Visit dashboard.xengineering.net from phone/laptop anywhere - Username/password login (one-time per device) - Same dashboard, same data as ESP32 app</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#authentication-technical-details","title":"Authentication Technical Details","text":"<p>Supabase Authentication Strategy: - Row Level Security (RLS) ensures users only see their own data - Device-embedded auth tokens for seamless ESP32 app access - Standard web authentication for external access - Permanent device pairing (factory reset only way to unpair) - Admin override capability for account transfers/support</p> <p>Security Considerations: - Auth tokens stored securely in ESP32 flash memory - Tokens can be refreshed/revoked if compromised - User data isolated via database-level security rules - Admin access for legitimate account transfers</p>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#10-hardware-architecture","title":"10. Hardware Architecture","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#esp32-partition-table","title":"ESP32 Partition Table","text":"# Name Type SubType Offset Size nvs data nvs 0x9000 0x5000 otadata data ota 0xe000 0x2000 factory app factory 0x10000 0x400000 ota_0 app ota_0 0x410000 0x400000 factory_fs data spiffs 0x810000 0x200000 prod_fs data spiffs 0xa10000 0x200000 userdata data spiffs 0xc10000 0x3D0000 coredump data coredump 0xFF0000 0x10000"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#11-data-management","title":"11. Data Management","text":"<ul> <li>Users need ability to delete all stored data from database</li> <li>GDPR compliance through Supabase data export/deletion features</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#12-future-expansion-capabilities","title":"12. Future Expansion Capabilities","text":""},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#real-time-social-features-supabase-enables","title":"Real-time Social Features (Supabase Enables)","text":"<ul> <li>Live position sharing between friends</li> <li>Real-time leaderboard updates</li> <li>Instant notifications for achievements</li> <li>Group voyage planning</li> <li>Weather alerts to nearby boats</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#advanced-analytics-postgresql-enables","title":"Advanced Analytics (PostgreSQL Enables)","text":"<ul> <li>Complex multi-table queries for insights</li> <li>Historical trend analysis</li> <li>Predictive maintenance algorithms</li> <li>Fleet performance comparisons</li> <li>Equipment reliability statistics</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#third-party-integrations","title":"Third-party Integrations","text":"<ul> <li>Weather service APIs</li> <li>Marina databases</li> <li>Parts supplier catalogs</li> <li>Insurance usage-based rates</li> <li>Navigation software integration</li> </ul>"},{"location":"localstuff%20for%20Xengineering%20ref/updated_planning_doc/#global-scaling-vercel-enables","title":"Global Scaling (Vercel Enables)","text":"<ul> <li>Automatic global CDN distribution</li> <li>Edge computing for regional optimizations</li> <li>A/B testing for feature rollouts</li> <li>Performance monitoring and optimization</li> </ul>"},{"location":"software/","title":"Software Overview","text":"<p>Content to be updated later.</p>"},{"location":"software/client/css/","title":"CSS","text":"<p>Content to be updated later.</p>"},{"location":"software/client/html/","title":"HTML","text":"<p>Content to be updated later.</p>"},{"location":"software/client/javascript/","title":"JavaScript","text":"<p>Content to be updated later.</p>"},{"location":"software/esp32/communication_interfaces/","title":"Communication Interfaces","text":""},{"location":"software/esp32/communication_interfaces/#overview","title":"Overview","text":"<p>The regulator integrates with marine communication protocols to access navigation data, battery monitoring information, and other vessel systems. Three primary interfaces provide comprehensive data integration:</p> <ul> <li>NMEA 2000: CAN-based network for navigation and engine data</li> <li>NMEA 0183: Serial ASCII protocol for legacy navigation equipment</li> <li>Victron VE.Direct: Serial protocol for Victron energy system integration</li> </ul>"},{"location":"software/esp32/communication_interfaces/#nmea-2000-integration","title":"NMEA 2000 Integration","text":""},{"location":"software/esp32/communication_interfaces/#purpose","title":"Purpose","text":"<p>NMEA 2000 provides access to vessel navigation data, engine parameters, and electrical system information via a CAN bus network.</p>"},{"location":"software/esp32/communication_interfaces/#hardware-configuration","title":"Hardware Configuration","text":"<pre><code>#define ESP32_CAN_RX_PIN GPIO_NUM_16\n#define ESP32_CAN_TX_PIN GPIO_NUM_17\n#include &lt;NMEA2000_CAN.h&gt;\n#include &lt;N2kMessages.h&gt;\n\nvoid initializeNMEA2000() {\n  NMEA2000.SetForwardType(tNMEA2000::fwdt_Text);\n  NMEA2000.SetForwardStream(OutputStream);\n  NMEA2000.EnableForward(false);\n  NMEA2000.SetMsgHandler(HandleNMEA2000Msg);\n  NMEA2000.Open();\n}\n</code></pre> <p>Pin Configuration: GPIO 16/17 provide CAN transceiver interface Message Filtering: Selective message processing to reduce CPU load</p>"},{"location":"software/esp32/communication_interfaces/#message-handler-system","title":"Message Handler System","text":"<pre><code>typedef struct {\n  unsigned long PGN;\n  void (*Handler)(const tN2kMsg &amp;N2kMsg);\n} tNMEA2000Handler;\n\ntNMEA2000Handler NMEA2000Handlers[] = {\n  { 126992L, &amp;SystemTime },\n  { 127245L, &amp;Rudder },\n  { 127250L, &amp;Heading },\n  { 127257L, &amp;Attitude },\n  { 127506L, &amp;DCStatus },\n  { 127513L, &amp;BatteryConfigurationStatus },\n  { 128259L, &amp;Speed },\n  { 128267L, &amp;WaterDepth },\n  { 129026L, &amp;COGSOG },\n  { 129029L, &amp;GNSS },\n  { 129540L, &amp;GNSSSatsInView },\n  { 0, 0 }\n};\n\nvoid HandleNMEA2000Msg(const tN2kMsg &amp;N2kMsg) {\n  for (int i = 0; NMEA2000Handlers[i].PGN != 0; i++) {\n    if (N2kMsg.PGN == NMEA2000Handlers[i].PGN) {\n      NMEA2000Handlers[i].Handler(N2kMsg);\n      break;\n    }\n  }\n}\n</code></pre> <p>Message Processing: Table-driven handler dispatch for registered PGNs</p>"},{"location":"software/esp32/communication_interfaces/#key-message-handlers","title":"Key Message Handlers","text":""},{"location":"software/esp32/communication_interfaces/#gnss-position-data-pgn-129029","title":"GNSS Position Data (PGN 129029)","text":"<pre><code>void GNSS(const tN2kMsg&amp; N2kMsg) {\n  static unsigned long lastGNSSUpdate = 0;\n  if (millis() - lastGNSSUpdate &lt; 2000) return;  // Throttle to 2 seconds\n  lastGNSSUpdate = millis();\n\n  unsigned char SID;\n  uint16_t DaysSince1970;\n  double SecondsSinceMidnight;\n  double Latitude, Longitude, Altitude;\n  tN2kGNSStype GNSStype;\n  tN2kGNSSmethod GNSSmethod;\n  unsigned char nSatellites;\n  double HDOP, PDOP, GeoidalSeparation;\n\n  if (ParseN2kGNSS(N2kMsg, SID, DaysSince1970, SecondsSinceMidnight,\n                   Latitude, Longitude, Altitude, GNSStype, GNSSmethod,\n                   nSatellites, HDOP, PDOP, GeoidalSeparation, ...)) {\n\n    // Validate GPS data\n    if (!isnan(Latitude) &amp;&amp; !isnan(Longitude) &amp;&amp; \n        Latitude != 0.0 &amp;&amp; Longitude != 0.0 &amp;&amp; \n        abs(Latitude) &lt;= 90.0 &amp;&amp; abs(Longitude) &lt;= 180.0 &amp;&amp; \n        nSatellites &gt; 0) {\n\n      LatitudeNMEA = Latitude;\n      LongitudeNMEA = Longitude;\n      SatelliteCountNMEA = nSatellites;\n\n      MARK_FRESH(IDX_LATITUDE_NMEA);\n      MARK_FRESH(IDX_LONGITUDE_NMEA);\n      MARK_FRESH(IDX_SATELLITE_COUNT);\n    }\n  }\n}\n</code></pre> <p>Data Validation: Range checking and satellite count verification prevent invalid position data</p>"},{"location":"software/esp32/communication_interfaces/#heading-data-pgn-127250","title":"Heading Data (PGN 127250)","text":"<pre><code>void Heading(const tN2kMsg&amp; N2kMsg) {\n  static unsigned long lastHeadingUpdate = 0;\n  if (millis() - lastHeadingUpdate &lt; 2000) return;\n  lastHeadingUpdate = millis();\n\n  unsigned char SID;\n  tN2kHeadingReference HeadingReference;\n  double Heading, Deviation, Variation;\n\n  if (ParseN2kHeading(N2kMsg, SID, Heading, Deviation, Variation, HeadingReference)) {\n    HeadingNMEA = Heading * 180.0 / PI;  // Convert radians to degrees\n    MARK_FRESH(IDX_HEADING_NMEA);\n  }\n}\n</code></pre>"},{"location":"software/esp32/communication_interfaces/#dc-status-pgn-127506","title":"DC Status (PGN 127506)","text":"<pre><code>void DCStatus(const tN2kMsg&amp; N2kMsg) {\n  unsigned char SID, DCInstance;\n  tN2kDCType DCType;\n  unsigned char StateOfCharge, StateOfHealth;\n  double TimeRemaining, RippleVoltage, Capacity;\n\n  if (ParseN2kDCStatus(N2kMsg, SID, DCInstance, DCType, StateOfCharge, \n                       StateOfHealth, TimeRemaining, RippleVoltage, Capacity)) {\n    // Process battery monitoring data from NMEA 2000 network\n    // Can be used as alternative to local INA228 measurements\n  }\n}\n</code></pre>"},{"location":"software/esp32/communication_interfaces/#performance-and-throttling","title":"Performance and Throttling","text":"<pre><code>// Message rate limiting prevents CPU overload\nstatic unsigned long lastUpdate = 0;\nif (millis() - lastUpdate &lt; THROTTLE_INTERVAL) return;\nlastUpdate = millis();\n</code></pre> <p>Throttling Strategy:  - GNSS updates: 2-second minimum interval - Heading updates: 2-second minimum interval - Other messages: Variable based on update rate requirements</p>"},{"location":"software/esp32/communication_interfaces/#nmea-0183-integration","title":"NMEA 0183 Integration","text":""},{"location":"software/esp32/communication_interfaces/#purpose_1","title":"Purpose","text":"<p>NMEA 0183 provides ASCII sentence-based communication with legacy navigation equipment and GPS devices.</p>"},{"location":"software/esp32/communication_interfaces/#hardware-configuration_1","title":"Hardware Configuration","text":"<pre><code>#define NMEA0183_RX_PIN 25\n#define NMEA0183_TX_PIN -1  // Receive only\n\nvoid initializeNMEA0183() {\n  Serial1.begin(19200, SERIAL_8N1, NMEA0183_RX_PIN, NMEA0183_TX_PIN, 0);\n  Serial1.flush();\n}\n</code></pre> <p>Baud Rate: Standard 19200 bps for NMEA 0183 Configuration: Receive-only implementation (no transmission required)</p>"},{"location":"software/esp32/communication_interfaces/#message-parsing","title":"Message Parsing","text":"<pre><code>void readNMEA0183() {\n  while (Serial1.available()) {\n    char c = Serial1.read();\n\n    if (c == '$') {\n      // Start of new sentence\n      nmeaBuffer[0] = c;\n      nmeaIndex = 1;\n    } else if (c == '\\n' || c == '\\r') {\n      // End of sentence\n      if (nmeaIndex &gt; 0) {\n        nmeaBuffer[nmeaIndex] = '\\0';\n        parseNMEASentence(nmeaBuffer);\n        nmeaIndex = 0;\n      }\n    } else if (nmeaIndex &lt; NMEA_BUFFER_SIZE - 1) {\n      nmeaBuffer[nmeaIndex++] = c;\n    }\n  }\n}\n\nvoid parseNMEASentence(char* sentence) {\n  if (strncmp(sentence, \"$GPGGA\", 6) == 0) {\n    parseGGA(sentence);\n  } else if (strncmp(sentence, \"$GPRMC\", 6) == 0) {\n    parseRMC(sentence);\n  }\n  // Additional sentence types as needed\n}\n</code></pre> <p>Sentence Types: - GGA: Global positioning system fix data - RMC: Recommended minimum specific GPS/transit data - VTG: Track made good and ground speed</p>"},{"location":"software/esp32/communication_interfaces/#current-implementation-status","title":"Current Implementation Status","text":"<pre><code>int NMEA0183Data = 0;  // Set to 1 if NMEA serial data exists\n</code></pre> <p>Implementation Note: NMEA 0183 parsing framework exists but is not fully implemented. The hardware interface and basic parsing structure are in place for future development.</p>"},{"location":"software/esp32/communication_interfaces/#victron-vedirect-integration","title":"Victron VE.Direct Integration","text":""},{"location":"software/esp32/communication_interfaces/#purpose_2","title":"Purpose","text":"<p>VE.Direct provides access to Victron energy system data including battery monitors (BMV-712), solar charge controllers, and inverters.</p>"},{"location":"software/esp32/communication_interfaces/#hardware-configuration_2","title":"Hardware Configuration","text":"<pre><code>#define VEDIRECT_RX_PIN 26\n#define VEDIRECT_TX_PIN -1  // Receive only\n\n#include \"VeDirectFrameHandler.h\"\nVeDirectFrameHandler myve;\n\nvoid initializeVEDirect() {\n  Serial2.begin(19200, SERIAL_8N1, VEDIRECT_RX_PIN, VEDIRECT_TX_PIN, 1);\n  Serial2.flush();\n}\n</code></pre> <p>Baud Rate: 19200 bps standard for VE.Direct Protocol: Text-based label/value pairs with checksum validation</p>"},{"location":"software/esp32/communication_interfaces/#data-processing","title":"Data Processing","text":"<pre><code>void ReadVEData() {\n  if (VeData != 1) return;\n\n  static unsigned long lastVEDataRead = 0;\n  const unsigned long VE_DATA_INTERVAL = 2000;  // 2 seconds\n\n  if (millis() - lastVEDataRead &lt;= VE_DATA_INTERVAL) return;\n\n  int start1 = micros();\n  bool dataReceived = false;\n\n  while (Serial2.available()) {\n    myve.rxData(Serial2.read());\n\n    for (int i = 0; i &lt; myve.veEnd; i++) {\n      if (strcmp(myve.veName[i], \"V\") == 0) {\n        float newVoltage = (atof(myve.veValue[i]) / 1000);\n        if (newVoltage &gt; 0 &amp;&amp; newVoltage &lt; 100) {\n          VictronVoltage = newVoltage;\n          MARK_FRESH(IDX_VICTRON_VOLTAGE);\n          dataReceived = true;\n        }\n      }\n\n      if (strcmp(myve.veName[i], \"I\") == 0) {\n        float newCurrent = (atof(myve.veValue[i]) / 1000);\n        if (newCurrent &gt; -1000 &amp;&amp; newCurrent &lt; 1000) {\n          VictronCurrent = newCurrent;\n          MARK_FRESH(IDX_VICTRON_CURRENT);\n          dataReceived = true;\n        }\n      }\n    }\n    yield();  // Allow other processes\n  }\n\n  int end1 = micros();\n  VeTime = end1 - start1;  // Performance monitoring\n  lastVEDataRead = millis();\n}\n</code></pre>"},{"location":"software/esp32/communication_interfaces/#vedirect-protocol-details","title":"VE.Direct Protocol Details","text":"<pre><code>Label: Value\nV: 12750        // Battery voltage (mV)\nI: -1230        // Battery current (mA)\nP: -15          // Instantaneous power (W)\nCE: -1500       // Consumed energy (mAh)\nSOC: 876        // State of charge (\u2030)\nTTG: 65535      // Time to go (minutes)\nAlarm: OFF      // Alarm status\nRelay: OFF      // Relay status\nAR: 0           // Alarm reason\nBMV: 712        // Model identification\nFW: 0212        // Firmware version\nChecksum: 9\n</code></pre> <p>Data Format: Text labels followed by colon and numeric value Validation: Checksum verification and range checking for each parameter</p>"},{"location":"software/esp32/communication_interfaces/#integration-with-control-system","title":"Integration with Control System","text":"<pre><code>// VE.Direct data can be used as battery voltage/current source\nint BatteryCurrentSource = 3;  // 0=INA228, 1=NMEA2K, 2=NMEA0183, 3=Victron\n\nfloat getBatteryCurrent() {\n  switch (BatteryCurrentSource) {\n    case 3:  // Victron VE.Direct\n      if (abs(VictronCurrent) &gt; 0.1) {\n        return VictronCurrent;  // Direct use, no polarity inversion needed\n      } else {\n        queueConsoleMessage(\"Victron current not available, using INA228\");\n        return Bcur;  // Fallback to local sensor\n      }\n  }\n}\n</code></pre> <p>Sensor Hierarchy: VE.Direct can serve as primary or backup data source for battery monitoring</p>"},{"location":"software/esp32/communication_interfaces/#communication-interface-management","title":"Communication Interface Management","text":""},{"location":"software/esp32/communication_interfaces/#data-source-selection","title":"Data Source Selection","text":"<pre><code>// Battery voltage source priority\nint BatteryVoltageSource = 0;  // 0=INA228, 1=ADS1115, 2=VictronVeDirect, 3=NMEA0183, 4=NMEA2K\n\nfloat getBatteryVoltage() {\n  static unsigned long lastWarningTime = 0;\n\n  switch (BatteryVoltageSource) {\n    case 0:  // INA228 (preferred)\n      if (!IS_STALE(IDX_IBV) &amp;&amp; IBV &gt; 8.0 &amp;&amp; IBV &lt; 70.0) {\n        return IBV;\n      }\n      // Automatic fallback with user notification\n      if (millis() - lastWarningTime &gt; 10000) {\n        queueConsoleMessage(\"INA228 unavailable, falling back to ADS1115\");\n        lastWarningTime = millis();\n      }\n      return BatteryV;  // ADS1115 fallback\n\n    case 2:  // VE.Direct\n      if (!IS_STALE(IDX_VICTRON_VOLTAGE) &amp;&amp; VictronVoltage &gt; 8.0) {\n        return VictronVoltage;\n      }\n      queueConsoleMessage(\"Victron voltage invalid, using INA228\");\n      return IBV;  // Fallback to local sensor\n  }\n}\n</code></pre>"},{"location":"software/esp32/communication_interfaces/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>// Timing measurement for each interface\nint VeTime = 0;        // VE.Direct processing time (microseconds)\nint NMEA2KData = 0;    // NMEA 2000 data availability flag\nint VeData = 0;        // VE.Direct data availability flag\n</code></pre> <p>Performance Tracking: Microsecond-level timing for interface processing overhead</p>"},{"location":"software/esp32/communication_interfaces/#error-handling-and-recovery","title":"Error Handling and Recovery","text":"<pre><code>// Interface health monitoring\nif (VeData == 1 &amp;&amp; IS_STALE(IDX_VICTRON_VOLTAGE)) {\n  queueConsoleMessage(\"VE.Direct communication timeout\");\n}\n\nif (NMEA2KData == 1 &amp;&amp; IS_STALE(IDX_LATITUDE_NMEA)) {\n  queueConsoleMessage(\"NMEA 2000 GPS data timeout\");\n}\n</code></pre> <p>Automatic Recovery: - Serial interface reset on prolonged timeouts - CAN bus reinitialization on communication failures - Graceful fallback to local sensors when remote data unavailable</p>"},{"location":"software/esp32/communication_interfaces/#configuration-and-control","title":"Configuration and Control","text":""},{"location":"software/esp32/communication_interfaces/#interface-enabledisable","title":"Interface Enable/Disable","text":"<pre><code>// User-configurable interface enables\nint VeData = 0;        // 0=disabled, 1=enabled\nint NMEA0183Data = 0;  // 0=disabled, 1=enabled  \nint NMEA2KData = 0;    // 0=disabled, 1=enabled\n</code></pre> <p>Runtime Control: Interfaces can be enabled/disabled via web interface without firmware changes</p>"},{"location":"software/esp32/communication_interfaces/#verbose-debug-output","title":"Verbose Debug Output","text":"<pre><code>int NMEA2KVerbose = 0;  // 0=quiet, 1=serial debug output\n\nif (NMEA2KVerbose == 1) {\n  Serial.print(\"NMEA2K PGN: \");\n  Serial.println(N2kMsg.PGN);\n}\n</code></pre> <p>Debugging: Optional verbose output for troubleshooting communication issues</p>"},{"location":"software/esp32/communication_interfaces/#resource-usage-and-performance","title":"Resource Usage and Performance","text":""},{"location":"software/esp32/communication_interfaces/#cpu-utilization","title":"CPU Utilization","text":"Interface Processing Time Update Rate CPU Impact NMEA 2000 ~100\u00b5s per message Variable (1Hz-10Hz) ~1-2% VE.Direct ~2000\u00b5s per update 2 seconds &lt;1% NMEA 0183 Not implemented N/A 0%"},{"location":"software/esp32/communication_interfaces/#memory-usage","title":"Memory Usage","text":"<ul> <li>NMEA 2000: ~2KB for message buffers and handler tables</li> <li>VE.Direct: ~1KB for frame parsing buffers</li> <li>Data storage: 68 bytes for freshness timestamps</li> </ul>"},{"location":"software/esp32/communication_interfaces/#communication-bandwidth","title":"Communication Bandwidth","text":"<ul> <li>CAN bus: ~125kbps physical, ~1-5% utilization typical</li> <li>Serial interfaces: 19200 bps each, ~10-50% utilization</li> <li>Total overhead: &lt;5% of main loop execution time</li> </ul> <p>This communication interface system provides comprehensive integration with marine electronics while maintaining efficient resource utilization and robust error handling.</p>"},{"location":"software/esp32/field_control_docs/","title":"Alternator Field Control","text":""},{"location":"software/esp32/field_control_docs/#overview","title":"Overview","text":"<p>The alternator field control system is the core function of the regulator, responsible for precisely controlling alternator output by modulating the field current through PWM (Pulse Width Modulation). The system implements two distinct control algorithms: standard mode for basic operation and Learning Mode for adaptive thermal management.</p>"},{"location":"software/esp32/field_control_docs/#theory-of-operation","title":"Theory of Operation","text":""},{"location":"software/esp32/field_control_docs/#alternator-field-control-fundamentals","title":"Alternator Field Control Fundamentals","text":"<p>An alternator generates electrical power through electromagnetic induction. The strength of the magnetic field (controlled by field current) directly determines the output voltage and current capacity. By varying the field current, the regulator controls:</p> <ul> <li>Output voltage: Higher field current = higher output voltage</li> <li>Current capability: Stronger field = ability to maintain voltage under load</li> <li>Power output: Combined effect determines total alternator power delivery</li> </ul>"},{"location":"software/esp32/field_control_docs/#field-control-circuit","title":"Field Control Circuit","text":"<p>The field control circuit uses a high-current MOSFET driver to switch the field coil:</p> <pre><code>Battery 12V \u2192 Field Coil \u2192 MOSFET (controlled by ESP32 PWM) \u2192 Ground\n                \u2191\n            Flyback Diode\n</code></pre> <p>Key Components: - Field Coil: Typically 2-6\u03a9 resistance, inductance creates flyback voltage - MOSFET: High-current switch (GPIO pin 4 enable, PWM pin 32 control) - Flyback Diode: Protects MOSFET from inductive kickback - PWM Signal: 12-bit resolution (4096 steps), 15kHz switching frequency</p>"},{"location":"software/esp32/field_control_docs/#pwm-configuration","title":"PWM Configuration","text":"<pre><code>// PWM setup parameters\nconst int pwmPin = 32;              // Field PWM output pin\nconst int pwmResolution = 12;       // 12-bit resolution (0-4095)\nfloat SwitchingFrequency = 15000;   // 15kHz - above audible range\n\n// Initialize PWM\nledcAttach(pwmPin, SwitchingFrequency, pwmResolution);\n\n// Set duty cycle\nvoid setDutyPercent(int percent) {\n  percent = constrain(percent, 0, 100);\n  uint32_t duty = (4095UL * percent) / 100;\n  ledcWrite(pwmPin, duty);\n}\n</code></pre> <p>Frequency Selection: 15kHz provides: - Above audible range (&gt;15kHz) to prevent noise - Below EMI concerns (&lt;25kHz) - Good magnetic efficiency for field coil inductance - Fast enough response for control stability</p>"},{"location":"software/esp32/field_control_docs/#standard-control-algorithm-adjustfield","title":"Standard Control Algorithm (<code>AdjustField()</code>)","text":"<p>The standard algorithm implements traditional alternator regulation with multiple safety layers and override options.</p>"},{"location":"software/esp32/field_control_docs/#control-flow-overview","title":"Control Flow Overview","text":"<pre><code>Sensor Inputs \u2192 Target Calculation \u2192 Field Adjustment \u2192 Safety Overrides \u2192 PWM Output\n     \u2193               \u2193                    \u2193                  \u2193               \u2193\nBattery V,I \u2192 uTargetAmps (Hi/Low) \u2192 dutyCycle \u00b1 step \u2192 Temperature Limit \u2192 MOSFET\nTemperature \u2192 RPM Curve Override   \u2192 PID-like Control \u2192 Voltage Limit    \u2192 Field Coil\nEngine RPM  \u2192 Manual Override      \u2192 Rate Limited    \u2192 Current Limit     \u2192 Alt Output\n</code></pre>"},{"location":"software/esp32/field_control_docs/#core-control-logic","title":"Core Control Logic","text":"<pre><code>void AdjustField() {\n  static unsigned long lastFieldAdjustment = 0;\n  unsigned long currentTime = millis();\n\n  // Timing control - update every FieldAdjustmentInterval (50ms default)\n  if (currentTime - lastFieldAdjustment &lt;= FieldAdjustmentInterval) {\n    return;\n  }\n\n  // Enable conditions\n  chargingEnabled = (Ignition == 1 &amp;&amp; OnOff == 1);\n\n  // Emergency protection\n  if (currentBatteryVoltage &gt; (ChargingVoltageTarget + 0.2)) {\n    digitalWrite(4, 0);              // Immediate field disable\n    dutyCycle = MinDuty;\n    fieldCollapseTime = currentTime;\n    queueConsoleMessage(\"EMERGENCY: Field collapsed - voltage spike\");\n    return;\n  }\n\n  if (chargingEnabled) {\n    digitalWrite(4, 1);              // Enable field MOSFET\n\n    if (ManualFieldToggle == 0) {    // Automatic mode\n      // Step 1: Base target from Hi/Low setting\n      uTargetAmps = (HiLow == 1) ? TargetAmps : TargetAmpL;\n\n      // Step 2: RPM curve override\n      if (AmpControlByRPM == 1 &amp;&amp; RPM &gt; 100 &amp;&amp; RPM &lt; 6000) {\n        int rpmBasedAmps = interpolateAmpsFromRPM(RPM);\n        uTargetAmps = (HiLow == 0) ? min(rpmBasedAmps, TargetAmpL) : rpmBasedAmps;\n      }\n\n      // Step 3: Force Float override\n      if (ForceFloat == 1) {\n        uTargetAmps = 0;             // Target zero amps for float charging\n      }\n\n      // Step 4: Weather mode override\n      if (weatherModeEnabled == 1 &amp;&amp; currentWeatherMode == 1) {\n        uTargetAmps = -99;           // Disable charging in high solar\n      }\n\n      // Step 5: Get current measurement\n      targetCurrent = (ForceFloat == 1) ? Bcur : getTargetAmps();\n\n      // Step 6: Proportional control\n      if (targetCurrent &lt; uTargetAmps &amp;&amp; dutyCycle &lt; (MaxDuty - dutyStep)) {\n        dutyCycle += dutyStep;       // Increase field\n      }\n      if (targetCurrent &gt; uTargetAmps &amp;&amp; dutyCycle &gt; (MinDuty + dutyStep)) {\n        dutyCycle -= dutyStep;       // Decrease field\n      }\n\n      // Step 7: Safety overrides (progressively aggressive)\n      if (TempToUse &gt; TemperatureLimitF &amp;&amp; dutyCycle &gt; (MinDuty + 2*dutyStep)) {\n        dutyCycle -= 2 * dutyStep;   // Temperature protection\n      }\n      if (currentBatteryVoltage &gt; ChargingVoltageTarget &amp;&amp; dutyCycle &gt; (MinDuty + 3*dutyStep)) {\n        dutyCycle -= 3 * dutyStep;   // Voltage protection\n      }\n      if (Bcur &gt; MaximumAllowedBatteryAmps &amp;&amp; dutyCycle &gt; (MinDuty + dutyStep)) {\n        dutyCycle -= dutyStep;       // Battery current protection\n      }\n\n      dutyCycle = constrain(dutyCycle, MinDuty, MaxDuty);\n\n    } else {\n      // Manual override mode\n      dutyCycle = ManualDutyTarget;\n    }\n  } else {\n    // Charging disabled\n    digitalWrite(4, 0);\n    dutyCycle = MinDuty;\n  }\n\n  // Apply calculated duty cycle\n  setDutyPercent((int)dutyCycle);\n\n  // Calculate field parameters for display\n  vvout = dutyCycle / 100 * currentBatteryVoltage;\n  iiout = vvout / FieldResistance;\n\n  lastFieldAdjustment = currentTime;\n}\n</code></pre>"},{"location":"software/esp32/field_control_docs/#target-current-calculation","title":"Target Current Calculation","text":""},{"location":"software/esp32/field_control_docs/#hilow-mode-selection","title":"Hi/Low Mode Selection","text":"<pre><code>// Basic target selection\nif (HiLow == 1) {\n  uTargetAmps = TargetAmps;     // Normal mode (typically 40A)\n} else {\n  uTargetAmps = TargetAmpL;     // Low mode (typically 25A)\n}\n</code></pre> <p>Usage: - Normal mode: Maximum alternator output for fast charging - Low mode: Reduced output for extended operation or hot conditions</p>"},{"location":"software/esp32/field_control_docs/#rpm-based-current-curves","title":"RPM-Based Current Curves","text":"<p>The system supports a 20-point RPM vs current curve for engine-specific optimization:</p> <pre><code>int interpolateAmpsFromRPM(float currentRPM) {\n  // Arrays from global variables RPM1-RPM20, Amps1-Amps20\n  int rpmPoints[] = {RPM1, RPM2, RPM3, ...};\n  int ampPoints[] = {Amps1, Amps2, Amps3, ...};\n\n  // Find valid entries (non-zero RPM values)\n  int validPoints = 0;\n  for (int i = 0; i &lt; 20; i++) {\n    if (rpmPoints[i] &gt; 0) validPoints = i + 1;\n  }\n\n  // Handle edge cases\n  if (currentRPM &lt;= rpmPoints[0]) return ampPoints[0];\n  if (currentRPM &gt;= rpmPoints[validPoints-1]) return ampPoints[validPoints-1];\n\n  // Linear interpolation between points\n  for (int i = 0; i &lt; validPoints - 1; i++) {\n    if (currentRPM &gt;= rpmPoints[i] &amp;&amp; currentRPM &lt;= rpmPoints[i+1]) {\n      float ratio = (currentRPM - rpmPoints[i]) / (float)(rpmPoints[i+1] - rpmPoints[i]);\n      return ampPoints[i] + (ratio * (ampPoints[i+1] - ampPoints[i]));\n    }\n  }\n\n  return TargetAmps;  // Fallback\n}\n</code></pre> <p>Example RPM Curve: <pre><code>RPM:   0   500  800  1000 1200 1500 4000\nAmps:  0   20   30   40   40   50   30\n</code></pre></p> <p>Benefits: - Low RPM protection: Reduced load when engine can't handle full power - High RPM protection: Reduced field at excessive speeds - Optimal power: Maximum safe output at engine's power band - Smooth transitions: Linear interpolation prevents sudden changes</p>"},{"location":"software/esp32/field_control_docs/#current-source-selection","title":"Current Source Selection","text":"<p>The <code>getTargetAmps()</code> function implements sensor source selection with fallback:</p> <pre><code>float getTargetAmps() {\n  switch (AmpSrc) {\n    case 0:  // Alternator Hall Effect Sensor (default)\n      return MeasuredAmps;\n\n    case 1:  // Battery Shunt (INA228)\n      return Bcur;\n\n    case 6:  // Victron VE.Direct\n      if (abs(VictronCurrent) &gt; 0.1) {\n        return VictronCurrent;\n      }\n      // Fallback to battery shunt\n      return Bcur;\n\n    default:\n      queueConsoleMessage(\"Invalid AmpSrc, using Alt Hall Sensor\");\n      return MeasuredAmps;\n  }\n}\n</code></pre> <p>Source Selection Strategy: - Alternator current: Direct measurement of alternator output - Battery current: Net battery charging rate (accounts for loads) - External sources: NMEA2K, NMEA0183, VE.Direct integration</p>"},{"location":"software/esp32/field_control_docs/#control-algorithm-analysis","title":"Control Algorithm Analysis","text":""},{"location":"software/esp32/field_control_docs/#proportional-control","title":"Proportional Control","text":"<p>The standard algorithm implements simple proportional control:</p> <pre><code>// Increase field if below target\nif (targetCurrent &lt; uTargetAmps &amp;&amp; dutyCycle &lt; (MaxDuty - dutyStep)) {\n  dutyCycle += dutyStep;\n}\n\n// Decrease field if above target  \nif (targetCurrent &gt; uTargetAmps &amp;&amp; dutyCycle &gt; (MinDuty + dutyStep)) {\n  dutyCycle -= dutyStep;\n}\n</code></pre> <p>Parameters: - <code>dutyStep</code>: Adjustment increment per cycle (default 0.8%) - <code>FieldAdjustmentInterval</code>: Update rate (default 50ms) - Result: ~1.6%/second maximum change rate</p> <p>Characteristics: - Stable: No overshoot or oscillation - Responsive: 50ms update rate - Predictable: Linear response to error</p>"},{"location":"software/esp32/field_control_docs/#safety-override-hierarchy","title":"Safety Override Hierarchy","text":"<p>Safety overrides apply with increasing aggressiveness:</p> <pre><code>// Level 1: Temperature (2x step reduction)\nif (TempToUse &gt; TemperatureLimitF) {\n  dutyCycle -= 2 * dutyStep;  // 1.6% reduction\n}\n\n// Level 2: Voltage (3x step reduction)  \nif (currentBatteryVoltage &gt; ChargingVoltageTarget) {\n  dutyCycle -= 3 * dutyStep;  // 2.4% reduction\n}\n\n// Level 3: Battery current (1x step reduction)\nif (Bcur &gt; MaximumAllowedBatteryAmps) {\n  dutyCycle -= dutyStep;      // 0.8% reduction\n}\n</code></pre> <p>Priority Logic: 1. Voltage protection: Most aggressive (prevents alternator runaway) 2. Temperature protection: Highly aggressive (prevents thermal damage) 3. Current protection: Standard rate (protects battery and wiring)</p>"},{"location":"software/esp32/field_control_docs/#emergency-protection-systems","title":"Emergency Protection Systems","text":""},{"location":"software/esp32/field_control_docs/#field-collapse-protection","title":"Field Collapse Protection","text":"<p>Immediate field shutdown on dangerous voltage spikes:</p> <pre><code>if (currentBatteryVoltage &gt; (ChargingVoltageTarget + 0.2)) {\n  digitalWrite(4, 0);              // Emergency MOSFET disable\n  dutyCycle = MinDuty;\n  setDutyPercent((int)dutyCycle);\n  fieldCollapseTime = currentTime;\n  queueConsoleMessage(\"EMERGENCY: Field collapsed - voltage spike\");\n  return;\n}\n</code></pre> <p>Recovery Logic: <pre><code>// Stay disabled for 10 seconds\nif (fieldCollapseTime &gt; 0 &amp;&amp; (currentTime - fieldCollapseTime) &lt; FIELD_COLLAPSE_DELAY) {\n  digitalWrite(4, 0);\n  dutyCycle = MinDuty;\n  return;\n}\n\n// Clear flag after delay\nif (fieldCollapseTime &gt; 0 &amp;&amp; (currentTime - fieldCollapseTime) &gt;= FIELD_COLLAPSE_DELAY) {\n  fieldCollapseTime = 0;\n  queueConsoleMessage(\"Field collapse delay expired - normal operation resumed\");\n}\n</code></pre></p> <p>Benefits: - Immediate response: Hardware-level protection - Prevents runaway: Stops voltage from climbing further - Automatic recovery: Resumes operation when safe - User notification: Clear indication of protective action</p>"},{"location":"software/esp32/field_control_docs/#hardware-overvoltage-protection","title":"Hardware Overvoltage Protection","text":"<p>The INA228 provides independent hardware protection:</p> <pre><code>// Configure hardware threshold\nuint16_t thresholdLSB = (uint16_t)(VoltageHardwareLimit / 0.003125);\nINA.setBusOvervoltageTH(thresholdLSB);\nINA.setDiagnoseAlertBit(INA228_DIAG_BUS_OVER_LIMIT);\n\n// Direct hardware write for latching alert\nWire.beginTransmission(INA.getAddress());\nWire.write(0x0F);  // ALERT_MASK_ENABLE register\nWire.write(0x98);  // Enable ALERT pin + latch + bus overvoltage\nWire.write(0x00);\nWire.endTransmission();\n</code></pre> <p>Operation: - Independent: Functions regardless of ESP32 software state - Fast response: Hardware detection and response - Latching: Maintains alert until manually cleared - Automatic recovery: Software monitors and clears when voltage drops</p>"},{"location":"software/esp32/field_control_docs/#voltage-source-validation","title":"Voltage Source Validation","text":"<p>Battery voltage measurement includes redundancy checking:</p> <pre><code>// Cross-validation between sensors\nif (abs(BatteryV - IBV) &gt; 0.1) {\n  queueConsoleMessage(\"Disagreement in measured Battery Voltage - Field Shut Off for safety!\");\n  digitalWrite(33, HIGH);  // Sound alarm\n  digitalWrite(4, 0);      // Disable field\n  dutyCycle = MinDuty;\n  return;\n}\n</code></pre> <p>Sensors Compared: - <code>BatteryV</code>: ADS1115 measurement via voltage divider - <code>IBV</code>: INA228 high-precision measurement - Tolerance: 0.1V maximum difference allowed</p>"},{"location":"software/esp32/field_control_docs/#advanced-features","title":"Advanced Features","text":""},{"location":"software/esp32/field_control_docs/#charging-stage-logic","title":"Charging Stage Logic","text":"<p>The system implements bulk/float charging stages:</p> <pre><code>void updateChargingStage() {\n  float currentVoltage = getBatteryVoltage();\n\n  if (inBulkStage) {\n    ChargingVoltageTarget = BulkVoltage;  // Typically 13.9V\n\n    if (currentVoltage &gt;= ChargingVoltageTarget) {\n      if (bulkCompleteTimer == 0) {\n        bulkCompleteTimer = millis();\n      } else if (millis() - bulkCompleteTimer &gt; bulkCompleteTime) {\n        inBulkStage = false;\n        floatStartTime = millis();\n        queueConsoleMessage(\"Bulk stage complete, switching to float\");\n      }\n    } else {\n      bulkCompleteTimer = 0;\n    }\n  } else {\n    ChargingVoltageTarget = FloatVoltage;  // Typically 13.4V\n\n    // Return to bulk after time expires or voltage drops\n    if ((millis() - floatStartTime &gt; FLOAT_DURATION * 1000) || \n        (currentVoltage &lt; FloatVoltage - 0.5)) {\n      inBulkStage = true;\n      queueConsoleMessage(\"Returning to bulk stage\");\n    }\n  }\n}\n</code></pre> <p>Stage Characteristics: - Bulk stage: Higher voltage for fast charging - Float stage: Lower voltage for maintenance - Automatic transitions: Based on voltage and time - Return logic: Drops back to bulk if voltage falls or time expires</p>"},{"location":"software/esp32/field_control_docs/#force-float-mode","title":"Force Float Mode","text":"<p>Special mode for precision float charging:</p> <pre><code>if (ForceFloat == 1) {\n  uTargetAmps = 0;              // Target zero net battery current\n  targetCurrent = Bcur;         // Use battery current, not alternator current\n}\n</code></pre> <p>Purpose: - Precision float: Maintains exact float voltage - Load compensation: Accounts for vessel loads - Battery protection: Prevents overcharging - Long-term storage: Ideal for seasonal storage</p>"},{"location":"software/esp32/field_control_docs/#weather-integration","title":"Weather Integration","text":"<p>Solar panel integration for smart charging:</p> <pre><code>if (weatherModeEnabled == 1 &amp;&amp; currentWeatherMode == 1) {\n  uTargetAmps = -99;  // Disable alternator charging\n}\n</code></pre> <p>Logic: - Fetches solar forecast data - Disables alternator when sufficient solar available - Reduces engine runtime and fuel consumption - Integrates with solar charge controllers</p>"},{"location":"software/esp32/field_control_docs/#bms-integration","title":"BMS Integration","text":"<p>Battery Management System override capability:</p> <pre><code>if (bmsLogic == 1) {\n  bmsSignalActive = !digitalRead(36);\n  if (bmsLogicLevelOff == 0) {\n    chargingEnabled = chargingEnabled &amp;&amp; bmsSignalActive;\n  } else {\n    chargingEnabled = chargingEnabled &amp;&amp; !bmsSignalActive;\n  }\n}\n</code></pre> <p>Features: - Digital input from BMS - Configurable polarity (active high/low) - Override capability for LiFePO4 protection - Integration with external battery protection systems</p>"},{"location":"software/esp32/field_control_docs/#field-control-calculations","title":"Field Control Calculations","text":""},{"location":"software/esp32/field_control_docs/#field-power-calculation","title":"Field Power Calculation","text":"<p>Real-time field power parameters:</p> <pre><code>// Field voltage (approximate)\nvvout = dutyCycle / 100 * currentBatteryVoltage;\n\n// Field current (approximate, assumes resistive load)\niiout = vvout / FieldResistance;\n\n// Field power\nfloat fieldPower = vvout * iiout;\n</code></pre> <p>Accuracy Limitations: - Assumes purely resistive field coil - Ignores inductive effects and temperature coefficient - Provides reasonable approximation for monitoring</p>"},{"location":"software/esp32/field_control_docs/#duty-cycle-limits","title":"Duty Cycle Limits","text":"<p>Configurable limits protect alternator and electrical system:</p> <pre><code>// Global limits\nfloat MaxDuty = 99.0;    // Maximum field strength\nfloat MinDuty = 1.0;     // Minimum for reliable switching\n\n// Applied in control\ndutyCycle = constrain(dutyCycle, MinDuty, MaxDuty);\n</code></pre> <p>Considerations: - MinDuty &gt; 0: Ensures MOSFET switching reliability - MaxDuty &lt; 100: Prevents potential damage from 100% duty cycle - User configurable: Adjustable for different alternator types</p>"},{"location":"software/esp32/field_control_docs/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"software/esp32/field_control_docs/#response-time-analysis","title":"Response Time Analysis","text":"<p>System response characteristics:</p> Parameter Value Notes Update Rate 50ms FieldAdjustmentInterval Step Size 0.8% dutyStep default Maximum Rate 1.6%/second dutyCycle change rate 0-50% Time ~31 seconds Linear response Emergency Stop &lt;1ms Hardware GPIO response"},{"location":"software/esp32/field_control_docs/#control-stability","title":"Control Stability","text":"<p>Stability analysis:</p> <pre><code>Plant: Alternator + Battery (slow thermal, fast electrical)\nController: Proportional with rate limiting\nDisturbances: Load changes, temperature, engine speed\n</code></pre> <p>Stability Factors: - Slow thermal response: Field heating time constant ~10-30 seconds - Fast electrical response: Field current follows PWM within milliseconds - Rate limiting: Prevents oscillation and overshoot - Multiple sensors: Redundancy prevents false triggering</p>"},{"location":"software/esp32/field_control_docs/#resource-requirements","title":"Resource Requirements","text":"<p>CPU and memory usage:</p> <ul> <li>CPU time: ~5-15ms per 50ms cycle (10-30% of main loop)</li> <li>Memory: ~50 bytes for control variables</li> <li>Flash: ~8KB for control code</li> <li>Real-time constraints: Must complete within watchdog timeout</li> </ul>"},{"location":"software/esp32/field_control_docs/#configuration-parameters","title":"Configuration Parameters","text":""},{"location":"software/esp32/field_control_docs/#basic-settings","title":"Basic Settings","text":"Parameter Default Range Description TargetAmps 40 0-200 Normal mode current target TargetAmpL 25 0-200 Low mode current target BulkVoltage 13.9 12.0-16.0 Bulk charging voltage FloatVoltage 13.4 12.0-16.0 Float charging voltage TemperatureLimitF 150 100-250 Temperature limit (\u00b0F)"},{"location":"software/esp32/field_control_docs/#advanced-settings","title":"Advanced Settings","text":"Parameter Default Range Description dutyStep 0.8 0.1-5.0 Field adjustment step size (%) FieldAdjustmentInterval 50 10-1000 Control update rate (ms) SwitchingFrequency 15000 50-25000 PWM frequency (Hz) MaxDuty 99.0 50-99 Maximum duty cycle (%) MinDuty 1.0 0-10 Minimum duty cycle (%)"},{"location":"software/esp32/field_control_docs/#rpm-curve-configuration","title":"RPM Curve Configuration","text":"<p>The 20-point RPM curve is fully user-configurable:</p> <pre><code>RPM Points:  RPM1, RPM2, ..., RPM20  (0-6000 RPM)\nAmp Points:  Amps1, Amps2, ..., Amps20  (0-200 A)\n</code></pre> <p>Guidelines: - Start at 0: RPM1=0, Amps1=0 for idle protection - Engine range: Configure for actual engine operating range - Power band: Higher values in engine's optimal RPM range - High RPM limit: Reduce at excessive speeds</p>"},{"location":"software/esp32/field_control_docs/#troubleshooting-guide","title":"Troubleshooting Guide","text":""},{"location":"software/esp32/field_control_docs/#common-issues","title":"Common Issues","text":""},{"location":"software/esp32/field_control_docs/#no-field-output","title":"No Field Output","text":"<pre><code>Check:\n1. GPIO pin 4 status (field enable)\n2. OnOff setting = 1\n3. Ignition signal active\n4. dutyCycle &gt; MinDuty\n5. No emergency field collapse active\n6. MOSFET driver functionality\n</code></pre>"},{"location":"software/esp32/field_control_docs/#voltage-regulation-problems","title":"Voltage Regulation Problems","text":"<pre><code>Check:\n1. Battery voltage sensor accuracy\n2. Current sensor calibration\n3. ChargingVoltageTarget setting\n4. Field resistance value\n5. Alternator field coil condition\n</code></pre>"},{"location":"software/esp32/field_control_docs/#oscillation-or-instability","title":"Oscillation or Instability","text":"<pre><code>Check:\n1. dutyStep too large\n2. FieldAdjustmentInterval too fast\n3. Sensor noise or poor connections\n4. Multiple control loops fighting\n</code></pre>"},{"location":"software/esp32/field_control_docs/#overheating","title":"Overheating","text":"<pre><code>Check:\n1. TemperatureLimitF setting\n2. Temperature sensor operation\n3. Alternator cooling and mounting\n4. Current targets too high for conditions\n</code></pre>"},{"location":"software/esp32/field_control_docs/#diagnostic-tools","title":"Diagnostic Tools","text":""},{"location":"software/esp32/field_control_docs/#real-time-monitoring","title":"Real-time Monitoring","text":"<ul> <li>Web interface shows live field parameters</li> <li>Console messages for all protective actions</li> <li>Performance timing (loop time, control timing)</li> </ul>"},{"location":"software/esp32/field_control_docs/#data-logging","title":"Data Logging","text":"<ul> <li>Field duty cycle history</li> <li>Temperature trends</li> <li>Voltage and current logging</li> <li>Emergency event logging</li> </ul> <p>This comprehensive field control system provides safe, efficient alternator regulation with extensive configurability and protection systems.</p>"},{"location":"software/esp32/important-functions/","title":"Important Functions","text":"<p>Content to be updated later.</p>"},{"location":"software/esp32/main-code/","title":"Main Code","text":"<p>Content to be updated later.</p>"},{"location":"software/esp32/non-important-functions/","title":"Non-Important Functions","text":"<p>Content to be updated later.</p>"},{"location":"software/esp32/sensor_systems/","title":"Sensor Systems &amp; Data Acquisition","text":""},{"location":"software/esp32/sensor_systems/#overview","title":"Overview","text":"<p>The regulator uses multiple sensor systems to monitor electrical parameters, temperature, and engine status. The system implements redundant measurements with automatic fallback and data validation to ensure reliable operation.</p>"},{"location":"software/esp32/sensor_systems/#ads1115-4-channel-analog-input","title":"ADS1115 4-Channel Analog Input","text":""},{"location":"software/esp32/sensor_systems/#purpose","title":"Purpose","text":"<p>The ADS1115 provides four 16-bit analog-to-digital conversion channels for primary system measurements: - Channel 0: Battery voltage (via voltage divider) - Channel 1: Alternator current (Hall effect sensor) - Channel 2: Engine RPM (magnetic pickup) - Channel 3: Thermistor temperature</p>"},{"location":"software/esp32/sensor_systems/#hardware-configuration","title":"Hardware Configuration","text":"<pre><code>// ADS1115 initialization\nADS1115_lite adc(ADS1115_DEFAULT_ADDRESS);\nadc.setGain(ADS1115_REG_CONFIG_PGA_6_144V);     // \u00b16.144V range\nadc.setSampleRate(ADS1115_REG_CONFIG_DR_64SPS); // 64 samples/second (15.6ms)\n</code></pre> <p>Gain Selection: \u00b16.144V range provides maximum resolution for 0-5V sensor inputs Sample Rate: 64 SPS balances conversion time (15.6ms) with noise rejection</p>"},{"location":"software/esp32/sensor_systems/#state-machine-implementation","title":"State Machine Implementation","text":"<p>The ADS1115 uses a non-blocking state machine to cycle through all channels:</p> <pre><code>enum ADS1115_State {\n  ADS_IDLE,\n  ADS_WAITING_FOR_CONVERSION\n};\n\nvoid ReadAnalogInputs() {\n  switch (adsState) {\n    case ADS_IDLE:\n      // Set channel and trigger conversion\n      adc.setMux(channelConfig[adsCurrentChannel]);\n      adc.triggerConversion();\n      adsStartTime = millis();\n      adsState = ADS_WAITING_FOR_CONVERSION;\n      break;\n\n    case ADS_WAITING_FOR_CONVERSION:\n      if (millis() - adsStartTime &gt;= ADSConversionDelay) {\n        Raw = adc.getConversion();\n        processChannelData(adsCurrentChannel, Raw);\n        adsCurrentChannel = (adsCurrentChannel + 1) % 4;\n        adsState = ADS_IDLE;\n      }\n      break;\n  }\n}\n</code></pre> <p>Benefits: - Non-blocking operation prevents main loop delays - Complete 4-channel cycle every 80ms (20ms per channel) - Automatic channel rotation ensures fresh data</p>"},{"location":"software/esp32/sensor_systems/#channel-processing","title":"Channel Processing","text":""},{"location":"software/esp32/sensor_systems/#channel-0-battery-voltage","title":"Channel 0: Battery Voltage","text":"<p><pre><code>Channel0V = Raw / 32767.0 * 6.144 / 0.0697674419;  // Voltage divider compensation\nBatteryV = Channel0V;\nif (BatteryV &gt; 5.0 &amp;&amp; BatteryV &lt; 70.0) {            // Sanity check\n  MARK_FRESH(IDX_BATTERY_V);\n}\n</code></pre> Voltage Divider: 1M\u03a9 and 75k\u03a9 resistors provide ~14:1 scaling for 12-48V systems</p>"},{"location":"software/esp32/sensor_systems/#channel-1-alternator-current","title":"Channel 1: Alternator Current","text":"<p><pre><code>Channel1V = Raw / 32767.0 * 6.144 * 2;           // 2:1 voltage divider\nMeasuredAmps = (Channel1V - 2.5) * 100;          // Hall sensor: 2.5V = 0A\nif (InvertAltAmps == 1) MeasuredAmps *= -1;      // Polarity correction\nMeasuredAmps -= AlternatorCOffset;               // User calibration offset\nif (AutoAltCurrentZero == 1) {\n  MeasuredAmps -= DynamicAltCurrentZero;         // Auto-zero correction\n}\n</code></pre> Hall Sensor: Linear output with 2.5V center point, 100A full scale</p>"},{"location":"software/esp32/sensor_systems/#channel-2-engine-rpm","title":"Channel 2: Engine RPM","text":"<p><pre><code>Channel2V = Raw / 32767.0 * 2 * 6.144 * RPMScalingFactor;\nRPM = Channel2V;\nif (RPM &lt; 100) RPM = 0;                          // Eliminate noise at idle\n</code></pre> RPM Sensor: Magnetic pickup provides pulse train proportional to engine speed</p>"},{"location":"software/esp32/sensor_systems/#channel-3-thermistor-temperature","title":"Channel 3: Thermistor Temperature","text":"<pre><code>Channel3V = Raw / 32767.0 * 6.144 * 833 * 2;    // Signal conditioning\ntemperatureThermistor = thermistorTempC(Channel3V);\nif (temperatureThermistor &gt; 500) temperatureThermistor = -99;  // Error indication\n</code></pre>"},{"location":"software/esp32/sensor_systems/#thermistor-calculation","title":"Thermistor Calculation","text":"<p><pre><code>int thermistorTempC(float V_thermistor) {\n  float R_thermistor = R_fixed * (V_thermistor / (5.0 - V_thermistor));\n  float T0_K = T0_C + 273.15;\n  float tempK = 1.0 / ((1.0 / T0_K) + (1.0 / Beta) * log(R_thermistor / R0));\n  return (int)(tempK - 273.15);\n}\n</code></pre> Steinhart-Hart Equation: Converts resistance to temperature using thermistor constants</p>"},{"location":"software/esp32/sensor_systems/#ina228-high-precision-battery-monitor","title":"INA228 High-Precision Battery Monitor","text":""},{"location":"software/esp32/sensor_systems/#purpose_1","title":"Purpose","text":"<p>The INA228 provides high-accuracy battery voltage and current measurement with hardware overvoltage protection: - Shunt voltage: \u00b1163.84mV range with 40nV resolution - Bus voltage: 0-85V range with 3.125mV resolution - Hardware protection: Configurable overvoltage threshold</p>"},{"location":"software/esp32/sensor_systems/#configuration","title":"Configuration","text":"<pre><code>INA.setMode(11);                           // Continuous shunt and bus voltage\nINA.setAverage(4);                         // 4-sample averaging\nINA.setBusVoltageConversionTime(7);        // 4120\u00b5s conversion time\nINA.setShuntVoltageConversionTime(7);      // 4120\u00b5s conversion time\n\n// Hardware overvoltage protection\nuint16_t thresholdLSB = (uint16_t)(VoltageHardwareLimit / 0.003125);\nINA.setBusOvervoltageTH(thresholdLSB);\nINA.setDiagnoseAlertBit(INA228_DIAG_BUS_OVER_LIMIT);\n</code></pre> <p>Update Rate: ~529ms total conversion time with averaging and conversion settings</p>"},{"location":"software/esp32/sensor_systems/#data-processing","title":"Data Processing","text":"<pre><code>void ReadINA228() {\n  if (INADisconnected == 0) {\n    IBV = INA.getBusVoltage();                              // Battery voltage\n    ShuntVoltage_mV = INA.getShuntVoltage() / 1000;        // Shunt voltage\n\n    if (!isnan(IBV) &amp;&amp; IBV &gt; 5.0 &amp;&amp; IBV &lt; 70.0) {\n      Bcur = ShuntVoltage_mV * 1000.0f / ShuntResistanceMicroOhm;  // Current calculation\n      Bcur = Bcur + BatteryCOffset;                         // User calibration\n\n      if (InvertBattAmps == 1) Bcur = -Bcur;               // Polarity correction\n\n      // Dynamic gain correction (Learning mode)\n      if (AutoShuntGainCorrection == 1 &amp;&amp; AmpSrc == 1) {\n        Bcur = Bcur * DynamicShuntGainFactor;\n      }\n\n      MARK_FRESH(IDX_IBV);\n      MARK_FRESH(IDX_BCUR);\n    }\n  }\n}\n</code></pre>"},{"location":"software/esp32/sensor_systems/#hardware-overvoltage-protection","title":"Hardware Overvoltage Protection","text":"<pre><code>// Check hardware alert status\nuint16_t alertStatus = readINA228AlertRegister(INA.getAddress());\nif (!inaOvervoltageLatched &amp;&amp; (alertStatus &amp; 0x0080)) {\n  inaOvervoltageLatched = true;\n  inaOvervoltageTime = millis();\n  queueConsoleMessage(\"INA228 hardware overvoltage detected! Field disabled until corrected\");\n}\n\n// Auto-clear after 10 seconds if condition resolved\nif (inaOvervoltageLatched &amp;&amp; millis() - inaOvervoltageTime &gt;= 10000) {\n  clearINA228AlertLatch(INA.getAddress());\n  if (!(readINA228AlertRegister(INA.getAddress()) &amp; 0x0080)) {\n    inaOvervoltageLatched = false;\n  }\n}\n</code></pre> <p>Benefits: - Hardware-level protection independent of software - Automatic recovery when overvoltage condition clears - Prevents alternator runaway scenarios</p>"},{"location":"software/esp32/sensor_systems/#onewire-temperature-sensors","title":"OneWire Temperature Sensors","text":""},{"location":"software/esp32/sensor_systems/#purpose_2","title":"Purpose","text":"<p>DS18B20 digital temperature sensors provide alternator temperature monitoring with high accuracy and immunity to electrical noise.</p>"},{"location":"software/esp32/sensor_systems/#hardware-configuration_1","title":"Hardware Configuration","text":"<pre><code>#define ONE_WIRE_BUS 13\nOneWire oneWire(ONE_WIRE_BUS);\nDallasTemperature sensors(&amp;oneWire);\n\nvoid initializeOneWire() {\n  sensors.begin();\n  sensors.setResolution(12);                    // 12-bit resolution (0.0625\u00b0C)\n  sensors.getAddress(tempDeviceAddress, 0);     // Get first sensor address\n}\n</code></pre>"},{"location":"software/esp32/sensor_systems/#freertos-task-implementation","title":"FreeRTOS Task Implementation","text":"<p>Temperature reading runs in a separate task to prevent main loop blocking:</p> <pre><code>void TempTask(void *parameter) {\n  esp_task_wdt_add(NULL);                       // Add to watchdog monitoring\n\n  for (;;) {\n    if (millis() - lastTempRead &lt; 10000) {      // 10-second update interval\n      vTaskDelay(pdMS_TO_TICKS(1000));\n      esp_task_wdt_reset();\n      continue;\n    }\n\n    // Trigger conversion\n    sensors.requestTemperaturesByAddress(tempDeviceAddress);\n\n    // Wait for conversion (5 seconds with watchdog feeding)\n    for (int i = 0; i &lt; 25; i++) {\n      vTaskDelay(pdMS_TO_TICKS(200));\n      esp_task_wdt_reset();\n    }\n\n    // Read result\n    if (sensors.readScratchPad(tempDeviceAddress, scratchPad)) {\n      int16_t raw = (scratchPad[1] &lt;&lt; 8) | scratchPad[0];\n      float tempF = (raw / 16.0) * 1.8 + 32.0;\n\n      if (tempF &gt; -50 &amp;&amp; tempF &lt; 300) {          // Sanity check\n        AlternatorTemperatureF = tempF;\n        if (AlternatorTemperatureF &gt; MaxAlternatorTemperatureF) {\n          MaxAlternatorTemperatureF = AlternatorTemperatureF;\n        }\n        MARK_FRESH(IDX_ALTERNATOR_TEMP);\n      }\n    }\n\n    lastTempRead = millis();\n  }\n}\n</code></pre> <p>Task Benefits: - Non-blocking main loop operation - Independent watchdog monitoring - Automatic error handling and recovery</p>"},{"location":"software/esp32/sensor_systems/#data-validation-and-quality-control","title":"Data Validation and Quality Control","text":""},{"location":"software/esp32/sensor_systems/#sanity-checking","title":"Sanity Checking","text":"<p>Each sensor reading undergoes validation before use:</p> <pre><code>// Example: Battery voltage validation\nif (BatteryV &gt; 5.0 &amp;&amp; BatteryV &lt; 70.0 &amp;&amp; !isnan(BatteryV)) {\n  // Valid reading - mark fresh and use\n  MARK_FRESH(IDX_BATTERY_V);\n} else {\n  // Invalid reading - do not mark fresh, data goes stale\n  Serial.println(\"Invalid battery voltage reading: \" + String(BatteryV));\n}\n</code></pre> <p>Validation Criteria: - Range limits: Physical limits for each measurement type - NaN detection: Arithmetic error checking - Rate limits: Maximum change rate between readings - Cross-validation: Compare redundant sensors when available</p>"},{"location":"software/esp32/sensor_systems/#data-freshness-tracking","title":"Data Freshness Tracking","text":"<pre><code>enum DataIndex {\n  IDX_ALTERNATOR_TEMP = 0,    // OneWire temperature\n  IDX_BATTERY_V,              // ADS1115 battery voltage\n  IDX_MEASURED_AMPS,          // ADS1115 alternator current\n  IDX_IBV,                    // INA228 battery voltage\n  IDX_BCUR,                   // INA228 battery current\n  IDX_RPM,                    // ADS1115 engine RPM\n  IDX_VICTRON_VOLTAGE,        // VE.Direct voltage\n  IDX_VICTRON_CURRENT,        // VE.Direct current\n  // ... additional indices\n  MAX_DATA_INDICES = 17\n};\n\nunsigned long dataTimestamps[MAX_DATA_INDICES];\nconst unsigned long DATA_TIMEOUT = 10000;      // 10 seconds\n\n#define MARK_FRESH(index) dataTimestamps[index] = millis()\n#define IS_STALE(index) (millis() - dataTimestamps[index] &gt; DATA_TIMEOUT)\n</code></pre> <p>Benefits: - Web interface shows stale data indicators - Prevents control decisions based on old readings - Enables automatic sensor fallback strategies - Facilitates troubleshooting sensor failures</p>"},{"location":"software/esp32/sensor_systems/#sensor-fallback-strategy","title":"Sensor Fallback Strategy","text":"<pre><code>float getBatteryVoltage() {\n  switch (BatteryVoltageSource) {\n    case 0:  // INA228 (preferred)\n      if (!IS_STALE(IDX_IBV) &amp;&amp; IBV &gt; 8.0 &amp;&amp; IBV &lt; 70.0) {\n        return IBV;\n      }\n      // Fall through to ADS1115\n\n    case 1:  // ADS1115 (backup)\n      if (!IS_STALE(IDX_BATTERY_V) &amp;&amp; BatteryV &gt; 8.0 &amp;&amp; BatteryV &lt; 70.0) {\n        return BatteryV;\n      }\n      // Fall through to VE.Direct\n\n    case 2:  // VE.Direct (tertiary)\n      if (!IS_STALE(IDX_VICTRON_VOLTAGE) &amp;&amp; VictronVoltage &gt; 8.0) {\n        return VictronVoltage;\n      }\n      break;\n  }\n\n  queueConsoleMessage(\"No valid battery voltage source available\");\n  return 999;  // Error indication\n}\n</code></pre> <p>Fallback Hierarchy: 1. Primary source: User-configured preference 2. Secondary sources: Automatic fallback to validated alternatives 3. Error handling: Graceful degradation with user notification</p>"},{"location":"software/esp32/sensor_systems/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"software/esp32/sensor_systems/#update-rates","title":"Update Rates","text":"Sensor Update Rate Notes ADS1115 80ms (4 channels) Complete cycle every 80ms INA228 529ms With averaging and high precision OneWire 10 seconds Separate task, temperature changes slowly NMEA2K 100ms-2s Variable based on message type VE.Direct 2 seconds Victron device dependent"},{"location":"software/esp32/sensor_systems/#accuracy-specifications","title":"Accuracy Specifications","text":"Parameter Sensor Resolution Accuracy Battery Voltage INA228 3.125mV \u00b10.1% Battery Current INA228 40nV (shunt) \u00b10.5% Alternator Current Hall Sensor ~100mA \u00b12% Temperature DS18B20 0.0625\u00b0C \u00b10.5\u00b0C Engine RPM Magnetic Pickup ~1 RPM \u00b11%"},{"location":"software/esp32/sensor_systems/#resource-usage","title":"Resource Usage","text":"<ul> <li>CPU time: ~15% of main loop for sensor reading</li> <li>Memory: 68 bytes for data timestamps, ~200 bytes for sensor buffers</li> <li>I2C bandwidth: ~2kHz for ADS1115 + INA228 continuous operation</li> <li>Task stack: 4KB for temperature task</li> </ul>"},{"location":"software/esp32/sensor_systems/#error-handling-and-recovery","title":"Error Handling and Recovery","text":""},{"location":"software/esp32/sensor_systems/#sensor-disconnection-detection","title":"Sensor Disconnection Detection","text":"<pre><code>// ADS1115 connection check\nif (!adc.testConnection()) {\n  ADS1115Disconnected = 1;\n  queueConsoleMessage(\"ADS1115 connection failed\");\n}\n\n// INA228 connection check  \nif (!INA.begin()) {\n  INADisconnected = 1;\n  queueConsoleMessage(\"INA228 connection failed\");\n}\n</code></pre>"},{"location":"software/esp32/sensor_systems/#automatic-recovery","title":"Automatic Recovery","text":"<ul> <li>I2C bus reset: Automatic recovery from bus lockup conditions</li> <li>Sensor reinitialization: Periodic connection testing and recovery</li> <li>Graceful degradation: Continue operation with available sensors</li> <li>User notification: Console messages for failed sensors</li> </ul>"},{"location":"software/esp32/sensor_systems/#data-integrity","title":"Data Integrity","text":"<ul> <li>Checksums: Protocol-level validation for digital communications</li> <li>Range checking: Physical limit validation for all measurements</li> <li>Trend analysis: Rate-of-change validation to detect sensor glitches</li> <li>Cross-validation: Compare redundant measurements when available</li> </ul> <p>This sensor system provides the reliable, accurate data foundation required for safe alternator control and comprehensive system monitoring.</p>"},{"location":"software/esp32/system_overview/","title":"System Overview","text":""},{"location":"software/esp32/system_overview/#purpose-design-philosophy","title":"Purpose &amp; Design Philosophy","text":"<p>The Xengineering Alternator Regulator controls alternator field output using ESP32-based PWM control with multi-source sensor inputs. The system provides battery monitoring, web-based configuration, and adaptive learning algorithms for thermal management.</p>"},{"location":"software/esp32/system_overview/#core-design-principles","title":"Core Design Principles","text":"<ul> <li>Safety: Multiple protection layers prevent alternator, battery, and electrical system damage</li> <li>Learning Mode: Adaptive alternator control based on temperature feedback and overheat history</li> <li>Real-time Interface: Web-based monitoring and control accessible from any device</li> <li>Reliability: Watchdog protection, error handling, and automatic recovery systems</li> <li>Open Source: Full transparency for modification and community development</li> </ul>"},{"location":"software/esp32/system_overview/#system-architecture","title":"System Architecture","text":""},{"location":"software/esp32/system_overview/#hardware-foundation","title":"Hardware Foundation","text":"<pre><code>ESP32-S3 (16MB Flash) \u2190 Main Controller\n\u251c\u2500\u2500 ADS1115 \u2190 4-channel analog input (battery V, alt current, RPM, temp)\n\u251c\u2500\u2500 INA228 \u2190 High-precision battery monitor with hardware overvoltage protection\n\u251c\u2500\u2500 OneWire \u2190 DS18B20 temperature sensors\n\u251c\u2500\u2500 Field MOSFET Driver \u2190 PWM control of alternator field\n\u251c\u2500\u2500 Digital I/O \u2190 Ignition, alarms, switches, BMS signals\n\u251c\u2500\u2500 Communication Interfaces \u2190 NMEA2K, NMEA0183, Victron VE.Direct\n\u2514\u2500\u2500 WiFi \u2190 Web interface and OTA updates\n</code></pre>"},{"location":"software/esp32/system_overview/#software-architecture","title":"Software Architecture","text":"<p>The firmware is organized around a main control loop with specialized subsystems:</p> <p>Core Control Loop (<code>loop()</code>): - Runs every ~50ms with watchdog protection - Sensor data acquisition - Field control calculations - Safety monitoring - Web data transmission</p> <p>Key Subsystems: - Sensor Management: Multi-source data with validation and fallback - Field Control: Normal mode vs Learning mode algorithms - Battery Monitoring: SOC tracking with Peukert correction - Web Interface: Real-time data streaming to browser clients - Safety Systems: Multiple protection layers and alarm conditions</p>"},{"location":"software/esp32/system_overview/#main-loop-structure","title":"Main Loop Structure","text":""},{"location":"software/esp32/system_overview/#setup-phase-setup","title":"Setup Phase (<code>setup()</code>)","text":"<p>The initialization sequence establishes all system components:</p> <pre><code>void setup() {\n  Serial.begin(115200);\n\n  // System initialization\n  initializeNVS();                    // Non-volatile storage for persistent data\n  loadNVSData();                      // Restore previous session data\n  ensureLittleFS();                   // File system for settings and web files\n  InitSystemSettings();               // Load all configuration from files\n\n  // Hardware initialization  \n  if (hardwarePresent == 1) {\n    initializeHardware();             // Sensors, communication interfaces\n  }\n\n  // Network and security\n  loadPasswordHash();                 // Web interface authentication\n  setupWiFi();                        // Network connectivity\n\n  // Safety systems\n  esp_task_wdt_init(&amp;wdt_config);     // 15-second watchdog protection\n  esp_task_wdt_add(NULL);\n\n  Serial.println(\"=== SETUP COMPLETE ===\");\n}\n</code></pre> <p>Key Setup Functions: - <code>initializeNVS()</code>: Persistent data storage initialization - <code>initializeHardware()</code>: Sensor and communication interfaces - <code>setupWiFi()</code>: Network configuration and connection - <code>InitSystemSettings()</code>: Load settings from LittleFS files</p>"},{"location":"software/esp32/system_overview/#main-loop-operation-loop","title":"Main Loop Operation (<code>loop()</code>)","text":"<p>The main control loop executes every 50-100ms with strict timing control:</p> <pre><code>void loop() {\n  esp_task_wdt_reset();              // Feed 15-second watchdog\n  starttime = esp_timer_get_time();  // Performance timing\n\n  // Core sensor reading\n  ReadAnalogInputs();                // ADS1115 state machine\n  if (VeData == 1) ReadVEData();     // Victron VE.Direct\n  if (NMEA2KData == 1) NMEA2000.ParseMessages();\n\n  // Battery and engine monitoring\n  UpdateEngineRuntime(elapsedMillis);\n  UpdateBatterySOC(elapsedMillis);\n\n  // Field control (main function)\n  if (LearningMode == 1) {\n    AdjustFieldLearnMode();          // Adaptive control algorithm\n  } else {\n    AdjustField();                   // Standard control algorithm  \n  }\n\n  // Safety and health monitoring\n  CheckAlarms();                     // Temperature, voltage, current limits\n  calculateThermalStress();          // Alternator lifetime modeling\n  updateSystemHealthMetrics();       // CPU, memory, stack monitoring\n\n  // User interface and data logging\n  SendWifiData();                    // Real-time web interface updates\n  UpdateDisplay();                   // Local OLED display\n\n  // Periodic maintenance\n  checkAndRestart();                 // Scheduled system restart (2 hours)\n\n  // Performance monitoring\n  endtime = esp_timer_get_time();\n  LoopTime = (endtime - starttime);\n  if (LoopTime &gt; MaxLoopTime) MaxLoopTime = LoopTime;\n}\n</code></pre> <p>Loop Timing: - Target: 50-100ms per iteration - Watchdog timeout: 15 seconds - Performance monitoring: Track maximum loop time - Automatic restart: Every 2 hours for maintenance</p>"},{"location":"software/esp32/system_overview/#data-flow-architecture","title":"Data Flow Architecture","text":""},{"location":"software/esp32/system_overview/#sensor-data-pipeline","title":"Sensor Data Pipeline","text":"<pre><code>Hardware Sensors \u2192 ESP32 GPIO/I2C \u2192 Data Validation \u2192 Global Variables \u2192 Web Interface\n     \u2193                \u2193                    \u2193               \u2193              \u2193\nADS1115/INA228 \u2192 ReadAnalogInputs() \u2192 Sanity Checks \u2192 MeasuredAmps \u2192 SendWifiData()\nOneWire Temp   \u2192 TempTask()         \u2192 Range Limits  \u2192 AlternatorTemperatureF\nNMEA2K/VE.Direct \u2192 Parse Functions \u2192 Protocol Valid \u2192 VictronVoltage\n</code></pre>"},{"location":"software/esp32/system_overview/#control-flow","title":"Control Flow","text":"<pre><code>Sensor Inputs \u2192 Target Calculation \u2192 Field Control \u2192 PWM Output \u2192 Alternator Response\n     \u2193              \u2193                    \u2193              \u2193              \u2193\nBattery V,I \u2192 uTargetAmps (Hi/Low/RPM) \u2192 dutyCycle \u2192 setDutyPercent() \u2192 Field Current\nTemperature \u2192 Safety Overrides        \u2192 Constraints \u2192 MOSFET Driver \u2192 Heat Generation\n</code></pre>"},{"location":"software/esp32/system_overview/#data-freshness-system","title":"Data Freshness System","text":"<p>The system tracks sensor data age to detect failed sensors:</p> <pre><code>// Data timestamp tracking\nenum DataIndex {\n  IDX_ALTERNATOR_TEMP = 0,\n  IDX_BATTERY_V,\n  IDX_MEASURED_AMPS,\n  // ... 17 total indices\n};\nunsigned long dataTimestamps[MAX_DATA_INDICES];\n\n// Mark data fresh when successfully read\n#define MARK_FRESH(index) dataTimestamps[index] = millis()\n\n// Check if data is stale (&gt;10 seconds old)\n#define IS_STALE(index) (millis() - dataTimestamps[index] &gt; DATA_TIMEOUT)\n</code></pre> <p>Benefits: - Web interface shows red indicators for stale data - Prevents control decisions based on old sensor readings - Enables automatic sensor fallback strategies</p>"},{"location":"software/esp32/system_overview/#memory-management","title":"Memory Management","text":""},{"location":"software/esp32/system_overview/#partition-scheme-16mb-esp32-s3","title":"Partition Scheme (16MB ESP32-S3)","text":"<pre><code>nvs         : 20KB   - Non-volatile storage (persistent variables)\notadata     : 8KB    - OTA boot selection\nfactory     : 4MB    - Factory firmware (GPIO15 recovery)\nota_0       : 4MB    - Production firmware (OTA updates)\nfactory_fs  : 2MB    - Factory web files\nprod_fs     : 2MB    - Production web files (OTA updated)\nuserdata    : 3.9MB  - Data logs and configuration\ncoredump    : 64KB   - Debug crash dumps\n</code></pre>"},{"location":"software/esp32/system_overview/#runtime-memory-management","title":"Runtime Memory Management","text":"<ul> <li>Heap monitoring: Continuous tracking with console warnings</li> <li>Stack monitoring: FreeRTOS task stack usage analysis</li> <li>Fragmentation tracking: Heap fragmentation percentage</li> <li>Console message queue: Fixed-size circular buffer (10 messages)</li> </ul> <p>Memory Safety: - Watchdog protection prevents hung tasks - Stack overflow detection for critical tasks - Automatic restart if heap falls below 20KB - Fixed-size buffers to prevent dynamic allocation issues</p>"},{"location":"software/esp32/system_overview/#safety-systems","title":"Safety Systems","text":""},{"location":"software/esp32/system_overview/#hardware-protection","title":"Hardware Protection","text":"<ul> <li>INA228 overvoltage protection: Hardware-level field shutdown at BulkVoltage + 0.1V</li> <li>Emergency field collapse: Immediate MOSFET disable on voltage spikes</li> <li>Watchdog timer: 15-second timeout with automatic restart</li> </ul>"},{"location":"software/esp32/system_overview/#software-protection-layers","title":"Software Protection Layers","text":"<pre><code>// Multiple safety checks in field control\nif (currentBatteryVoltage &gt; (ChargingVoltageTarget + 0.2)) {\n  digitalWrite(4, 0);           // Emergency field shutdown\n  dutyCycle = MinDuty;\n  fieldCollapseTime = millis(); // 10-second lockout\n  return;\n}\n\n// Temperature protection\nif (TempToUse &gt; TemperatureLimitF) {\n  dutyCycle -= 2 * dutyStep;    // Aggressive reduction\n}\n\n// Current limits\nif (Bcur &gt; MaximumAllowedBatteryAmps) {\n  dutyCycle -= dutyStep;        // Battery protection\n}\n</code></pre>"},{"location":"software/esp32/system_overview/#alarm-conditions","title":"Alarm Conditions","text":"<ul> <li>High alternator temperature</li> <li>Battery voltage too high/low</li> <li>Excessive alternator or battery current</li> <li>Sensor failures (stale data detection)</li> <li>System health issues (low memory, stack overflow)</li> </ul>"},{"location":"software/esp32/system_overview/#configuration-management","title":"Configuration Management","text":""},{"location":"software/esp32/system_overview/#settings-storage","title":"Settings Storage","text":"<ul> <li>LittleFS files: Human-readable text files for each setting</li> <li>NVS storage: Binary data for runtime variables and statistics</li> <li>Persistent variables: Battery SOC, energy totals, thermal damage accumulation</li> <li>Session variables: Reset on each boot (current maximums, loop times)</li> </ul>"},{"location":"software/esp32/system_overview/#default-value-system","title":"Default Value System","text":"<pre><code>// Example: Target current setting\nif (!LittleFS.exists(\"/TargetAmps.txt\")) {\n  writeFile(LittleFS, \"/TargetAmps.txt\", String(TargetAmps).c_str());\n} else {\n  TargetAmps = readFile(LittleFS, \"/TargetAmps.txt\").toInt();\n}\n</code></pre> <p>Benefits: - Settings survive firmware updates - Easy troubleshooting (readable files) - Factory reset capability - Individual setting modification without recompilation</p>"},{"location":"software/esp32/system_overview/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"software/esp32/system_overview/#timing-requirements","title":"Timing Requirements","text":"<ul> <li>Main loop: 50-100ms typical, 5000ms maximum (watchdog limit)</li> <li>Sensor reading: ADS1115 ~20ms per channel, INA228 ~5ms</li> <li>Field adjustment: Every 50ms (configurable)</li> <li>Web updates: Every 50ms (real-time data), 2-3 seconds (status data)</li> </ul>"},{"location":"software/esp32/system_overview/#resource-usage","title":"Resource Usage","text":"<ul> <li>Flash memory: ~1.4MB firmware (4MB available)</li> <li>RAM usage: ~200KB typical (320KB available)</li> <li>CPU utilization: ~15-25% average</li> <li>Network bandwidth: ~2KB/second for real-time web interface</li> </ul>"},{"location":"software/esp32/system_overview/#scalability-limits","title":"Scalability Limits","text":"<ul> <li>Maximum sensor channels: 4 analog (ADS1115), expandable via I2C</li> <li>Web clients: 5-10 simultaneous connections tested</li> <li>Data logging: 180 days local storage in userdata partition</li> <li>Settings: 100+ individual parameters in LittleFS files</li> </ul>"},{"location":"software/esp32/system_overview/#development-environment","title":"Development Environment","text":""},{"location":"software/esp32/system_overview/#required-tools","title":"Required Tools","text":"<ul> <li>Arduino IDE 2.x with ESP32 board package</li> <li>Custom partition scheme: <code>partitions.csv</code> in sketch folder</li> <li>Libraries: 20+ external libraries for sensors and communication</li> <li>Build configuration: ESP32-S3, 16MB flash, 240MHz CPU</li> </ul>"},{"location":"software/esp32/system_overview/#build-process","title":"Build Process","text":"<pre><code># Board configuration\nFQBN=\"esp32:esp32:esp32s3:FlashSize=16M,PartitionScheme=custom\"\n\n# Compilation\narduino-cli compile --fqbn $FQBN --output-dir ./build .\n\n# OTA package creation\ntar --format=ustar -cf firmware.tar -C build firmware.bin data/\n</code></pre> <p>This system overview provides the foundation for understanding the detailed subsystem documentation that follows.</p>"}]}